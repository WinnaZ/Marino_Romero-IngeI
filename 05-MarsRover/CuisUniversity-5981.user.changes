

----STARTUP---- (2 October 2023 20:06:14) as /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/CuisUniversity-5981.image!


----End fileIn of /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/Ejercicios/04-BabySteps/TDDBabyStepsGame.st----!

!classRemoval: #TDDBabyStepsGameView stamp: 'zm 10/2/2023 20:27:35'!
Object subclass: #TDDBabyStepsGameView
	instanceVariableNames: 'model stepResult gameJourney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #OnPrematureDecisionStep stamp: 'zm 10/2/2023 20:27:35'!
TDDBabyStepsGameState subclass: #OnPrematureDecisionStep
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #OnNormalStep stamp: 'zm 10/2/2023 20:27:35'!
TDDBabyStepsGameState subclass: #OnNormalStep
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #GameStarting stamp: 'zm 10/2/2023 20:27:35'!
TDDBabyStepsGameState subclass: #GameStarting
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #GameEnded stamp: 'zm 10/2/2023 20:27:35'!
TDDBabyStepsGameState subclass: #GameEnded
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameState stamp: 'zm 10/2/2023 20:27:36'!
Object subclass: #TDDBabyStepsGameState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameBase stamp: 'zm 10/2/2023 20:27:36'!
Object subclass: #TDDBabyStepsGameBase
	instanceVariableNames: 'name casesToTest currentStep currentStepReturnMessage category score currentTest journey definition extraTest state prematureDecisionVerifierStrategy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameRot13 stamp: 'zm 10/2/2023 20:27:36'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameRot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGamePrimeFactors stamp: 'zm 10/2/2023 20:27:36'!
TDDBabyStepsGame subclass: #TDDBabyStepsGamePrimeFactors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameDemo stamp: 'zm 10/2/2023 20:27:36'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameDemo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameCuentaBancaria stamp: 'zm 10/2/2023 20:27:36'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameCuentaBancaria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameContador stamp: 'zm 10/2/2023 20:27:36'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameContador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameAnagrams stamp: 'zm 10/2/2023 20:27:37'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameAnagrams
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGame stamp: 'zm 10/2/2023 20:27:37'!
Object subclass: #TDDBabyStepsGame
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameWindow stamp: 'zm 10/2/2023 20:27:37'!
SystemWindow subclass: #TDDBabyStepsGameWindow
	instanceVariableNames: 'stepResultTextBoxMorph nextButtonMorph forceNextButtonMorph definitionButtonMorph gameJourneyTextBoxMorph testNumberLabel pointsLabel helpButtonMorph lastStepPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classDefinition: #HundredDoors category: 'CuisUniversity' stamp: 'zm 10/2/2023 20:28:02'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classRemoval: #HundredDoors stamp: 'zm 10/2/2023 20:28:16'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #NameOfSubclass category: 'HundredDoors' stamp: 'zm 10/2/2023 20:28:20'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

TestCase subclass: #HundredDoorsTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #HundredDoorsTests category: 'HundredDoors' stamp: 'zm 10/2/2023 20:28:33'!
TestCase subclass: #HundredDoorsTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRemoval: #NameOfSubclass stamp: 'zm 10/2/2023 20:28:36'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:29:13'!
test01AllDoorStartClosed! !

!classDefinition: #HundredDoors category: 'HundredDoors' stamp: 'zm 10/2/2023 20:29:54'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:29:46' prior: 50333621!
test01AllDoorStartClosed
	|game|
	game := HundredDoors new.
	! !

0!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:32:39' prior: 50333632!
test01AllDoorStartClosed
	|game|
	game := HundredDoors new.
	self assert: game countOpen equals: 0.! !

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:32:44'!
ERROR!

Object subclass: #HundredDoors
	instanceVariableNames: 'open closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #HundredDoors category: 'HundredDoors' stamp: 'zm 10/2/2023 20:33:45'!
Object subclass: #HundredDoors
	instanceVariableNames: 'open closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:38:21' prior: 50333637!
test01AllDoorStartClosed
	|game|
	game := HundredDoors new.
	self assert: game countOpen equals: 0.! !

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:38:21'!
ERROR!
!HundredDoors methodsFor: 'counting' stamp: 'zm 10/2/2023 20:38:39'!
countOpen
	self shouldBeImplemented.! !
!HundredDoors methodsFor: 'counting' stamp: 'zm 10/2/2023 20:38:52' prior: 50333667!
countOpen
	^open! !

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:38:54'!
FAILURE!
!HundredDoorsTests class methodsFor: 'instance creation' stamp: 'zm 10/2/2023 20:39:25' overrides: 16904184!
initialize
	self new initialize.! !
!HundredDoorsTests class methodsFor: 'instance creation' stamp: 'zm 10/2/2023 20:39:33' prior: 50333679 overrides: 16904184!
initialize
	^self new initialize.! !
!HundredDoors class methodsFor: 'instance creation' stamp: 'zm 10/2/2023 20:40:46' overrides: 16904184!
initialize
	^self new initialize ! !
!HundredDoors class methodsFor: 'instance creation' stamp: 'zm 10/2/2023 20:40:48' prior: 50333690 overrides: 16904184!
initialize
	^self new initialize.! !
!HundredDoors methodsFor: 'initialization' stamp: 'zm 10/2/2023 20:41:40' overrides: 16920235!
initialize
	open := 0.
	closed := 100.! !

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:41:48'!
PASSED!

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:41:48'!
PASSED!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:42:31' prior: 50333658!
test01AllDoorStartClosed
	|game|
	game := HundredDoors new.
	self assert: game countOpen equals: 0.
	self assert: game countClosed equals: 100.! !

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:42:34'!
ERROR!
!HundredDoors methodsFor: 'counting' stamp: 'zm 10/2/2023 20:42:38'!
countClosed
	self shouldBeImplemented.! !
!HundredDoors methodsFor: 'counting' stamp: 'zm 10/2/2023 20:42:43' prior: 50333721!
countClosed
	^closed! !

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:42:44'!
PASSED!

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:42:44'!
PASSED!

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:42:48'!
PASSED!

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:42:48'!
PASSED!
!HundredDoors methodsFor: 'status' stamp: 'zm 10/2/2023 20:44:17'!
isClosed: aDoor
	^true! !
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:44:51'!
test02FirstDoorIsClosed
	! !
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:45:24' prior: 50333744!
test02FirstDoorIsClosed
	|game|
	game := HundredDoors new.
	self assert: (game isClosed: 1) equals: 0.
	
	! !

!testRun: #HundredDoorsTests #test02FirstDoorIsClosed stamp: 'zm 10/2/2023 20:45:25'!
FAILURE!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:45:30' prior: 50333748!
test02FirstDoorIsClosed
	|game|
	game := HundredDoors new.
	self assert: (game isClosed: 1) equals: true.
	
	! !

!testRun: #HundredDoorsTests #test02FirstDoorIsClosed stamp: 'zm 10/2/2023 20:45:31'!
PASSED!

!testRun: #HundredDoorsTests #test01AllDoorStartClosed stamp: 'zm 10/2/2023 20:45:31'!
PASSED!

!testRun: #HundredDoorsTests #test02FirstDoorIsClosed stamp: 'zm 10/2/2023 20:45:31'!
PASSED!
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:46:07'!
test03FirstDoorOpenAfterOneFlip
	|game|
	game := HundredDoors new.
	self assert: (game isClosed: 1) equals: true.
	
	! !
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:46:15' prior: 50333773!
test03FirstDoorOpenAfterOneFlip
	|game|
	game := HundredDoors new.
	self assert: (game isClosed: 1) equals: false.
	
	! !
!HundredDoorsTests methodsFor: 'testing' stamp: 'zm 10/2/2023 20:46:20' prior: 50333780!
test03FirstDoorOpenAfterOneFlip
	|game|
	game := HundredDoors new.
	game flip.
	self assert: (game isClosed: 1) equals: false.
	
	! !

!testRun: #HundredDoorsTests #test03FirstDoorOpenAfterOneFlip stamp: 'zm 10/2/2023 20:46:23'!
ERROR!
!HundredDoors methodsFor: 'flipping' stamp: 'zm 10/2/2023 20:46:46'!
flip
	self shouldBeImplemented.! !
!HundredDoors methodsFor: 'flipping' stamp: 'zm 10/2/2023 20:46:56' prior: 50333797!
flip
	^self! !

----STARTUP---- (5 October 2023 17:42:07) as /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/CuisUniversity-5981.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #NameOfSubclass category: 'Calendar' stamp: 'zm 10/5/2023 17:42:31'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendar category: 'Calendar' stamp: 'zm 10/5/2023 17:42:53'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #NameOfSubclass stamp: 'zm 10/5/2023 17:42:59'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Day category: 'Calendar' stamp: 'zm 10/5/2023 17:43:11'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Holliday category: 'Calendar' stamp: 'zm 10/5/2023 17:43:15'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendarTests category: 'Calendar' stamp: 'zm 10/5/2023 17:43:34'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

----STARTUP---- (9 October 2023 12:59:14) as /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/CuisUniversity-5981.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'zm 10/9/2023 13:11:12'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 13:11:26'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'zm 10/9/2023 13:11:35'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #NameOfSubclass stamp: 'zm 10/9/2023 13:11:40'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:14:45'!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new startsin: 0@0 withDirection: north .
	
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:14:54'!
ERROR!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:14' prior: 50331757!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover startsin: 0@0 withDirection: north .
	
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:15:16'!
ERROR!
!Object methodsFor: 'as yet unclassified' stamp: 'zm 10/9/2023 13:15:30'!
startsin: aRenameMe1 withDirection: north 
	self shouldBeImplemented.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:48' prior: 50331768!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover initializeWith: 0@0 withDirection: north .
	
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:15:53'!
ERROR!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:04' prior: 50331783!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new initializeWith: 0@0 withDirection: north .
	
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:16:06'!
ERROR!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:16:16'!
ERROR!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:46' prior: 50331794!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover new initializeWith: 0@0.
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:16:52'!
ERROR!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:17:04' prior: 50331808!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover initializeWith: 0@0.
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 13:17:07'!
ERROR!

----End fileIn of /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/Ejercicios/Stackbien-Exercise.st----!

----STARTUP---- (9 October 2023 14:23:39) as /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/CuisUniversity-5981.image!


----End fileIn of /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/Ejercicios/05-MarsRover/MarsRover.st----!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:26:59'!
ERROR!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 14:28:45'!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:28:38' prior: 50331818!
test01InitializingRoverAndItStaysInThatSpot
	|myRover rover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).

	! !

Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 14:29:26'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 14:29:46'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 14:30:06'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 14:30:10'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 14:30:18'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:30:30'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:30:39'!
withPosition: aRenameMe1 andDirection: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPosition: aRenameMe1 andDirection: aRenameMe2 ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:31:09' prior: 50332610!
withPosition: aPosition andDirection: aDirection 
	^self new initializeWithPosition: aPosition andDirection: aDirection ! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:31:11'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 14:31:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 14:31:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:23'!
initializeWithPosition: aPosition andDirection: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:29' prior: 50332644!
initializeWithPosition: aPosition andDirection: aDirection 
	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:31:36'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:00'!
process: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:15' prior: 50332662!
process: aComand 
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:32:16'!
ERROR!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:32:46' prior: 50332546!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position: (0@0) direction: #North).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:32:50'!
ERROR!
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:33:41'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:12' prior: 50332674!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North))

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:15' prior: 50332692!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:35:17'!
ERROR!
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:25'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:29' prior: 50332717!
position
	^position! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:35:32'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:35:42'!
ERROR!
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:51'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:54' prior: 50332732!
direction
	^direction! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:35:57'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:36:47' prior: 50332703!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position equals: (0@0)).
	self assert: (myRover direction equals: (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:37:26' prior: 50332744!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:37:28'!
FAILURE!

!methodRemoval: MarsRover #position:direction: stamp: 'zm 10/9/2023 14:37:46'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:38:35'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:39:07'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:16' prior: 50332755!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:39:19'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:39' prior: 50332781!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:39:39'!
FAILURE!

myRover position!

myRover direction!

myRover direction!

myRover direction = North!

myRover direction =  North!

myRover direction!

myRover direction = North!

myRover direction!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:43:24'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:43:37' prior: 50332795!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:43:39'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:44:01' prior: 50332819!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North new)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:44:03'!
FAILURE!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 14:45:54'!
Compass subclass: #North
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!North methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:45:52' overrides: 16920235!
initialize
	value := #North.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:46:13' prior: 50332833!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 14:46:15'!
FAILURE!

myRover position!

myRover direction!

myRover direction.!

North!

Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 14:48:37'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #Compass
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 14:48:43'!
Object subclass: #Compass
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Compass methodsFor: 'values' stamp: 'zm 10/9/2023 14:48:47' overrides: 16902254!
value
	^value.! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:00:09'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:00:09'!
FAILURE!

North!

North value!
!MarsRoverTest methodsFor: 'tests' stamp: 'zm 10/9/2023 15:02:19' prior: 50332171!
test01ProcessEmptyCommandListDoesNothing
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North value).! !

!testRun: #MarsRoverTest #test01ProcessEmptyCommandListDoesNothing stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test01ProcessEmptyCommandListDoesNothing stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test02processOneFowardCommandMovesTheRoverOnePositionFoward stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test03ProcessOneBackwardsCommandMovesTheRoverOnePositionBackwards stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test04ProcessManyBackwardsFowardCommands stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test05ProcessOneLeftCommandRotatesTheRoverToTheLeftOnce stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test07ProcessOneRightCommandRotatesTheRoverToTheRightOnce stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessManyRightCommandRotatesTheRoverToTheLeftMany stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessRightAndFowardCommandsMovesAndRotatesTheRover stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test10ProcessLeftAndFowardCommandsMovesAndRotatesTheRover stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test11ProcessLeftAndBackwardsCommandMovesAndRotatesTheRover stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test12ProcessManyRotationAndMovementCommands stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test13UnknownCommandDoesNothing stamp: 'zm 10/9/2023 15:02:20'!
PASSED!

!testRun: #MarsRoverTest #test14UnknownCommandCutsCommandProcessing stamp: 'zm 10/9/2023 15:02:20'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:02:33' prior: 50332858!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North value)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:02:33'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:02:39' prior: 50332971!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North value)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:02:40'!
FAILURE!

North value!

North!

North value!

North value!

myRover direction!

myRover direction = North!

myRover direction = North value!

myRover direction = (North value)!

myRover direction!
!MarsRoverTest methodsFor: 'tests' stamp: 'zm 10/9/2023 15:07:52' prior: 50332906!
test01ProcessEmptyCommandListDoesNothing
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !

!testRun: #MarsRoverTest #test01ProcessEmptyCommandListDoesNothing stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test01ProcessEmptyCommandListDoesNothing stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test02processOneFowardCommandMovesTheRoverOnePositionFoward stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test03ProcessOneBackwardsCommandMovesTheRoverOnePositionBackwards stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test04ProcessManyBackwardsFowardCommands stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test05ProcessOneLeftCommandRotatesTheRoverToTheLeftOnce stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test07ProcessOneRightCommandRotatesTheRoverToTheRightOnce stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessManyRightCommandRotatesTheRoverToTheLeftMany stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessRightAndFowardCommandsMovesAndRotatesTheRover stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test10ProcessLeftAndFowardCommandsMovesAndRotatesTheRover stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test11ProcessLeftAndBackwardsCommandMovesAndRotatesTheRover stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test12ProcessManyRotationAndMovementCommands stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test13UnknownCommandDoesNothing stamp: 'zm 10/9/2023 15:07:52'!
PASSED!

!testRun: #MarsRoverTest #test14UnknownCommandCutsCommandProcessing stamp: 'zm 10/9/2023 15:07:52'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:08:58' prior: 50332986!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North value)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:08:58'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:09:03' prior: 50333071!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:09:03'!
FAILURE!

North value!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:10:03' prior: 50333086!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:10:03'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:10:03'!
PASSED!
!South methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:00' overrides: 16920235!
initialize
	value := #South.! !
!West methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:32' overrides: 16920235!
initialize
	value := #West.! !
!East methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:49' overrides: 16920235!
initialize
	value := #East.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:14:53'!
test02ProccessMovesTheRoverToTheCorrectPosition
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:16:06' prior: 50333131!
test02ProccessMovesTheRoverToTheCorrectPosition
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:19:31'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:19:31'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:19:31'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:19:31'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:19:46'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:19:50'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:19:50'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:21:29' prior: 50332667!
process: aComand 
	(aComand = $f) ifTrue: [	 position := direction goForward: position ]
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:22:46' prior: 50333177!
process: aComand 
	(aComand = $f) ifTrue: [	 position := direction goUp: position ]
	! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:25:17'!
goUp: coordinates
	^coordinates + (0@1)! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:25:35'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:27:52' prior: 50333183!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ]
	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:27:53'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:27:53'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:28:33'!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 15:28:36'!
test02ProccessMovesTheRoverToTheCorrectPosition
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:15'!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:18' prior: 50333228!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:27' prior: 50333238!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:30'!
test03ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:29:35'!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:30:29' prior: 50333196!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ].
	(aComand = 'b') ifTrue: [	 position := direction goDown: position ].

	! !

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:30:36'!
ERROR!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:30:44'!
goDown: aPosition 
	self shouldBeImplemented.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:31:09' prior: 50333288!
goDown: aPosition 
	^aPosition - (0@0)! !

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:31:10'!
FAILURE!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:31:44' prior: 50333292!
goDown: aPosition 
	^aPosition - (0@1)! !

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:31:49'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:31:49'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 15:31:49'!
PASSED!

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:31:49'!
PASSED!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:12'!
goUp: coordinates
	^coordinates + (0@1)! !

!methodRemoval: North #goUp: stamp: 'zm 10/9/2023 15:33:12'!
goUp: coordinates
	^coordinates + (0@1)!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:18'!
goDown: aPosition 
	^aPosition - (0@1)! !

!methodRemoval: North #goDown: stamp: 'zm 10/9/2023 15:33:18'!
goDown: aPosition 
	^aPosition - (0@1)!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:32' prior: 50333326!
goDown: coordinates 
	^coordinates - (0@1)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50333319!
goUp: coordinates
	^coordinates + (0@1)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50333319!
goUp: coordinates
	^coordinates + (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50333319!
goUp: coordinates
	^coordinates + (0@1)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50333319!
goUp: coordinates
	^coordinates + (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' prior: 50333319!
goUp: coordinates

	self subclassResponsibility! !

!methodRemoval: Object #becomeForward:copyHash: stamp: 'zm 10/9/2023 15:34:57'!
ion goUp: position ]
	!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50333333!
goDown: coordinates 
	^coordinates - (0@1)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50333333!
goDown: coordinates 
	^coordinates - (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50333333!
goDown: coordinates 
	^coordinates - (0@1)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50333333!
goDown: coordinates 
	^coordinates - (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' prior: 50333333!
goDown: coordinates

	self subclassResponsibility! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:36:25' prior: 50333209!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 15:36:28'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:36:28'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 15:36:28'!
PASSED!

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:36:28'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:37:06' prior: 50333382!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 15:37:08'!
FAILURE!
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:37:35' prior: 50333345 overrides: 50333353!
goUp: coordinates
	^coordinates - (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:37:44' prior: 50333369 overrides: 50333377!
goDown: coordinates 
	^coordinates + (0@1)! !

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:37:54'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:37:54'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 15:37:54'!
PASSED!

!testRun: #MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:37:54'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:38:40' prior: 50333411!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:09'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 15:39:12'!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:23' prior: 50333471!
test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:45'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:54'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:16'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:25'!
test03ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:40:34'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:46'!
test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:40:46'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:55'!
test04ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !

!methodRemoval: MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:40:55'!
test03ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:41:03'!
test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !

!methodRemoval: MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:41:03'!
test04ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:41:20'!
test06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:41:20'!
test03ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:41:22'!
stest06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #stest06ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:41:27'!
stest06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:42:06' prior: 50333535!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (-1@0)).
	
	! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:29' prior: 50333341 overrides: 50333353!
goUp: coordinates
	^coordinates - (1@0)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:44' prior: 50333365 overrides: 50333377!
goDown: coordinates 
	^coordinates + (1@0)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:58' prior: 50333337 overrides: 50333353!
goUp: coordinates
	^coordinates + (1@0)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:43:12' prior: 50333361 overrides: 50333377!
goDown: coordinates 
	^coordinates - (1@0)! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:43:32' prior: 50333526!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (1@0)).

	
	! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:43:32'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:43:34'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:43:34'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:43:34'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:43:34'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:43:34'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:43:34'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:43:34'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:43:40'!
test06ProccessMovesTheRoverToTheCorrectPositionBackNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 15:43:43'!
test06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:43:45'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:43:45'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:43:45'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:43:45'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:43:45'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:43:45'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:43:45'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:43:51'!
test06ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:44:05'!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:44:05'!
test06ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:44:15' prior: 50333813!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:44:17'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:44:29' prior: 50333833!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@0)).

	! !

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:44:29'!
FAILURE!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:44:32'!
FAILURE!

myRover position!

myRover position!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:45:22' prior: 50333847!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:45:38'!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).

	! !

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:45:53'!
FAILURE!

myRover position!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:46:13' prior: 50333875!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (-1@0)).

	! !

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:46:14'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:46:16'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:46:16'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:46:42'!
test09ProccessMovesTheRoverToTheCorrectPositionBackWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).

	! !

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:46:43'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:46:43'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:01' prior: 50333693!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#East)).


	
	! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:47:01'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:47:01'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:15' prior: 50333663!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#West)).

	
	! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:47:16'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:47:16'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:25' prior: 50333564!
test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:30' prior: 50333604!
test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#North)).! !

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:47:31'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:47:31'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:41' prior: 50333757!
test06ProccessMovesTheRoverToTheCorrectPositionBackNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).
	self assert: (myRover direction value = (#North)).
	

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:45' prior: 50333866!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#North)).

	! !

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:47:46'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:55' prior: 50334158!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#South)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:48:02' prior: 50333889!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#East)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:48:09' prior: 50333937!
test09ProccessMovesTheRoverToTheCorrectPositionBackWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:48:10'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:48:10'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:04'!
test10ProccessLeftMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:12' prior: 50334245!
test10ProccessLeftMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:41'!
test10ProccessLeftMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesTheRoverCorrectly stamp: 'zm 10/9/2023 15:50:44'!
test10ProccessLeftMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:49' prior: 50334266!
test10ProccessLeftMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:51:30' prior: 50333277!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ].
	(aComand = 'b') ifTrue: [	 position := direction goDown: position ].
	(aComand = 'l' ifTrue: [ direction :=  direction goLeft: position])

	! !

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectly stamp: 'zm 10/9/2023 15:51:38'!
ERROR!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:51:47'!
goLeft: aPosition 
	self shouldBeImplemented.! !

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectly stamp: 'zm 10/9/2023 15:51:52'!
ERROR!

!methodRemoval: North #goLeft: stamp: 'zm 10/9/2023 15:52:09'!
goLeft: aPosition 
	self shouldBeImplemented.!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:24'!
goLeft: coordinates

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:31'!
goRight: coordinates

	self subclassResponsibility! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50334327!
goRight: coordinates

	self subclassResponsibility! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50334327!
goRight: coordinates

	self subclassResponsibility! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50334327!
goRight: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50334327!
goRight: coordinates

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' prior: 50334327!
goRight: coordinates

	self subclassResponsibility! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50334323!
goLeft: coordinates

	self subclassResponsibility! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50334323!
goLeft: coordinates

	self subclassResponsibility! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50334323!
goLeft: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50334323!
goLeft: coordinates

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' prior: 50334323!
goLeft: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:53:22' prior: 50334372 overrides: 50334377!
goLeft: coordinates
	^West new.! !

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectly stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectly stamp: 'zm 10/9/2023 15:53:29'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:53:48'!
test10ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectly stamp: 'zm 10/9/2023 15:53:48'!
test10ProccessLeftMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:54:02'!
test10ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 15:54:07'!
ERROR!
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:54:28' prior: 50334367 overrides: 50334377!
goLeft: coordinates
	^East new.! !

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 15:54:33'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 15:54:36'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:54:48'!
test10ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:54:57' prior: 50334518!
test10ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:55:57' prior: 50334362 overrides: 50334377!
goLeft: coordinates
	^South new.! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:56:49' prior: 50334357 overrides: 50334377!
goLeft: coordinates
	^North new.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:57:26'!
test10ProccessLeftMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 15:57:30'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 15:57:30'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:57:52'!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:01'!
test11ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 15:58:01'!
test10ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:07'!
test12ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 15:58:07'!
test10ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:17'!
test14ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 15:58:17'!
test10ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:27'!
test13ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !

!methodRemoval: MarsRoverTests #test14ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 15:58:27'!
test14ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:43'!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:55'!
test14ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:59:01'!
test14ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:59:14'!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test14ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 15:59:14'!
test14ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:59:21'!
test17ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test14ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 15:59:21'!
test14ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:59:47' prior: 50334332 overrides: 50334352!
goRight: coordinates
	^South new.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:00:02' prior: 50334347 overrides: 50334352!
goRight: coordinates
	^East new.! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:00:16' prior: 50334342 overrides: 50334352!
goRight: coordinates
	^West new.! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:00:29' prior: 50334337 overrides: 50334352!
goRight: coordinates
	^North new.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:47' prior: 50334767!
test17ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:52' prior: 50334745!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:56' prior: 50334613!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:01' prior: 50334712!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:05' prior: 50334842!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:06'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:09'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:22' prior: 50334853!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:25'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:25'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:31'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:31'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:53'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:01:53'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:02:31' prior: 50334299!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ].
	(aComand = 'b') ifTrue: [	 position := direction goDown: position ].
	(aComand = 'l') ifTrue: [ direction :=  direction goLeft: position].
	(aComand = 'r' )ifTrue: [ direction :=  direction goRight: position].
	! !

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:02:37'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:02:39'!
FAILURE!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:02:39'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:02:56' prior: 50334831!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:02:59'!
FAILURE!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:02:59'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:02:59'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:03:04' prior: 50334929!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:03:05'!
FAILURE!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:03:08'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:03:19' prior: 50335012!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:03:20'!
FAILURE!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:03:20'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:03:20'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:03:41'!
PASSED!

myRover direction value!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:04:09'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:04:24' prior: 50334820!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:04:41'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:04:41'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:31'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyM
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:34'!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyM stamp: 'zm 10/9/2023 16:05:37'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyM
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:50' prior: 50335211!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:55' prior: 50335234!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (2@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:07:17' prior: 50334905!
process: comands 
	comands do: [ :aCommand |  
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft: position].
		aCommand = $r ifTrue: [ direction := direction goRight: position ].
		].! !

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:07:25'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:07:25'!
FAILURE!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:07:25'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:08:01' prior: 50335256!
process: comands 
	comands do: [ :aCommand |
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft: position].
		aCommand = $r ifTrue: [ direction := direction goRight: position ].
		].! !

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:08:12'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:08:14'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:08:15'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:08:16'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:08:21'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:08:23'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:08:23'!
FAILURE!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:08:23'!
FAILURE!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:08:27'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:08:28'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:08:30'!
FAILURE!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:08:30'!
FAILURE!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:08:36'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:08:53' prior: 50335245!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:08:55'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:08:55'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:10'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 16:09:10'!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:25'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:09:25'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:47'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:55' prior: 50335603!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:03' prior: 50335615!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@-2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:17'!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@-2)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:10:17'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@-2)).
	self assert: (myRover direction value = (#North)).
	!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:10:21'!
FAILURE!

myRover position!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:49' prior: 50335638!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:10:50'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:59' prior: 50335667!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#South)).
	! !

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:10:59'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:11:00'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:13'!
test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:27' prior: 50335771!
test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'll'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:11:28'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:56'!
test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'll'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:11:57'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:13:20'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:13:20'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:14:20'!
test21ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnn'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

myRover position!

myRover direction!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:07' prior: 50336056!
test21ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnnr'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:15:09'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:15:10'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:15:10'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:18'!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnnr'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:30' prior: 50336172!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffffflfffffflffff'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !

myRover position!

myRover direction!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:16:07' prior: 50336184!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffffflfffffflffff'.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:16:13'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:16:13'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:17:14' prior: 50335345!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].! !

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:17:18'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:17:21'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:17:21'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:18:30' prior: 50336301!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self isInvalidRoverCommand]) value.
	    ].! !

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:18:36'!
ERROR!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:18:36'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:18:36'!
ERROR!
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:18:44'!
isInvalidRoverCommand
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:18:59' prior: 50336531!
isInvalidRoverCommand
	^'InvalidCommand'! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:19:01'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:19:01'!
PASSED!
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:19:19'!
InvalidMarsRoverCommand
	^'InvalidCommand'! !

!methodRemoval: MarsRover #isInvalidRoverCommand stamp: 'zm 10/9/2023 16:19:22'!
isInvalidRoverCommand
	^'InvalidCommand'!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:19:37' prior: 50336416!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self InvalidMarsRoverCommand ]) value.
	    ].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:19:41' prior: 50336637!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self InvalidMarsRoverCommand]) value.
	    ].! !

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:19:47'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:19:47'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:19:54' prior: 50336197!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'kkkk'.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:19:55'!
FAILURE!
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:21:27' prior: 50332496!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self invalidMarsRoverCommand]).
	    ].
! !

!testRun: #MarsRoverTest #test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice stamp: 'zm 10/9/2023 16:21:42'!
FAILURE!

!testRun: #MarsRoverTest #test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice stamp: 'zm 10/9/2023 16:21:42'!
FAILURE!

!testRun: #MarsRoverTest #test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice stamp: 'zm 10/9/2023 16:21:45'!
FAILURE!

!testRun: #MarsRoverTest #test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice stamp: 'zm 10/9/2023 16:21:45'!
FAILURE!
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:22:17' prior: 50336783!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self invalidMarsRoverCommand]) value.
	    ].
! !

!testRun: #MarsRoverTest #test05ProcessOneLeftCommandRotatesTheRoverToTheLeftOnce stamp: 'zm 10/9/2023 16:22:24'!
ERROR!

!testRun: #MarsRoverTest #test05ProcessOneLeftCommandRotatesTheRoverToTheLeftOnce stamp: 'zm 10/9/2023 16:22:24'!
ERROR!
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:22:49' prior: 50336818!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].
! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:24:40' prior: 50336845!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].
! !

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:24:57'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:25:00'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:25:00'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:25:00'!
FAILURE!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:25:07'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:25:09'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:25:09'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:30:20' prior: 50336656!
process: aCommandList
    | newPosition isValidCommand |
    aCommandList do: [:aCommand |
        isValidCommand := true.
        newPosition := self executeCommand: aCommand ifInvalid: [isValidCommand := false].
        isValidCommand ifTrue: [position := newPosition].
    ].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:33:03' prior: 50336993!
process: aCommandList
	    | commandHandlers |
	    commandHandlers := Dictionary new.
	    commandHandlers at: $f put: [ direction goUp: position ].
	    commandHandlers at: $b put: [ direction goDown: position ].
	    commandHandlers at: $l put: [ direction goLeft ].
	    commandHandlers at: $r put: [ direction goRight ].

	    aCommandList do: [:aCommand |
	        (commandHandlers at: aCommand ifAbsent: [self invalidMarsRoverCommand]) value.
	    ].! !

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:33:07'!
FAILURE!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:33:07'!
FAILURE!
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:33:36'!
goLeft
	^South new.! !

!methodRemoval: West #goLeft: stamp: 'zm 10/9/2023 16:33:40'!
goLeft: coordinates
	^South new.!
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:33:56'!
goRight
	^North new.! !

!methodRemoval: West #goRight: stamp: 'zm 10/9/2023 16:33:58'!
goRight: coordinates
	^North new.!
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:07'!
goRight
	^West new.! !

!methodRemoval: South #goRight: stamp: 'zm 10/9/2023 16:34:10'!
goRight: coordinates
	^West new.!
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:17'!
goLeft
	^East new.! !

!methodRemoval: South #goLeft: stamp: 'zm 10/9/2023 16:34:19'!
goLeft: coordinates
	^East new.!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:45'!
goLeft
	^West new.! !

!methodRemoval: North #goLeft: stamp: 'zm 10/9/2023 16:34:47'!
goLeft: coordinates
	^West new.!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:51'!
goRight
	^East new.! !

!methodRemoval: North #goRight stamp: 'zm 10/9/2023 16:34:55'!
goRight
	^East new.!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:03'!
goRight
	^East new.! !

!methodRemoval: North #goRight: stamp: 'zm 10/9/2023 16:35:05'!
goRight: coordinates
	^East new.!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:10'!
goLeft
	^North new.! !

!methodRemoval: East #goLeft: stamp: 'zm 10/9/2023 16:35:13'!
goLeft: coordinates
	^North new.!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:16'!
goRight
	^South new.! !

!methodRemoval: East #goRight: stamp: 'zm 10/9/2023 16:35:18'!
goRight: coordinates
	^South new.!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:35:23'!
FAILURE!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:35:23'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:35:36'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:35:37'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:35:37'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:36:12'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:36:44' prior: 50337005!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].! !

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:36:48'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:36:51'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:36:51'!
ERROR!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:36:51'!
FAILURE!
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:38:17' prior: 50336863!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction nextPositionFowardFromPosition:  position ].
		aCommand = $b ifTrue: [ position := direction nextPositionBackwardsFromPostion: position ].	
		aCommand = $l ifTrue: [ direction :=  direction toMyLeft].
		aCommand = $r ifTrue: [ direction := direction toMyRight ].
		].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:38:59' prior: 50337109!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self InvalidMarsRoverCommand aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 16:39:12'!
goLeft

	self subclassResponsibility! !

!methodRemoval: Compass #goLeft: stamp: 'zm 10/9/2023 16:39:14'!
goLeft: coordinates

	self subclassResponsibility!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 16:39:19'!
goRight

	self subclassResponsibility! !

!methodRemoval: Compass #goRight: stamp: 'zm 10/9/2023 16:39:21'!
goRight: coordinates

	self subclassResponsibility!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:39:26'!
ERROR!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:39:31'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:39:35'!
ERROR!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:39:35'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:39:47' prior: 50337241!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self InvalidMarsRoverCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:39:51'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:40:05' prior: 50337285!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(false) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:10'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:10'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:10'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:40:18' prior: 50336768!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: ''.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:19'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:40:23'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:40:25'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:40:26'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:40:27'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:40:28'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:40:28'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:40:29'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:40:30'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:40:32'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:40:33'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:40:34'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:40:35'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:40:36'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:40:36'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:40:37'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:40:38'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:40:40'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:40:41'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:40:41'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:40:43'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:40:44'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:46'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:40:46'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:40:56'!
PASSED!

!classRemoval: #SentenceFinderByPrefix stamp: 'zm 10/9/2023 16:41:21'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Tope stamp: 'zm 10/9/2023 16:41:22'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Elemento stamp: 'zm 10/9/2023 16:41:22'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Base stamp: 'zm 10/9/2023 16:41:22'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'zm 10/9/2023 16:41:22'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'zm 10/9/2023 16:41:22'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'zm 10/9/2023 16:41:22'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:42:23' prior: 50337414!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !

myRover position!

myRover process:'ff' .!

myRover position!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:43:21' prior: 50337572!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:43:27'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:43:43' prior: 50337586!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:43:44'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:43:44'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:44:00'!
test22ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:45:14' prior: 50337304!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isCommandValid: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:46:14'!
isCoValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:46:18'!
isCommandValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !

!methodRemoval: MarsRover #isCoValid: stamp: 'zm 10/9/2023 16:46:21'!
isCoValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:46:30'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:46:32'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:46:32'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessInvalidComand stamp: 'zm 10/9/2023 16:46:32'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:46:32'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:46:52'!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test22ProccessInvalidComand stamp: 'zm 10/9/2023 16:46:52'!
test22ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:46:56'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:46:56'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:46:56'!
FAILURE!

myRover position!

myRover direction value!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:47:24'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:47:26'!
FAILURE!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:47:26'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:47:36' prior: 50337850!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'fxf'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:47:37'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:47:50' prior: 50337978!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:47:51'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:47:51'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:47:51'!
FAILURE!

myRover position!

myRover direction value!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:48:23'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:48:25'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:48:25'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 16:48:25'!
FAILURE!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 16:48:58'!
PASSED!

----STARTUP---- (9 October 2023 16:50:23) as /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/CuisUniversity-5981.image!


----End fileIn of /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/MarsRover.st----!

!classDefinition: #NameOfSubclass category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #NameOfSubclass category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendar category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendar category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #NameOfSubclass stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Day category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Day category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Holliday category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Holliday category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendarTests category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendarTests category: 'Calendar' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #NameOfSubclass stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:14:45'!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new startsin: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:14' prior: 50338707!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover startsin: 0@0 withDirection: north .
	
	! !
!Object methodsFor: 'as yet unclassified' stamp: 'zm 10/9/2023 13:15:30'!
startsin: aRenameMe1 withDirection: north 
	self shouldBeImplemented.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:48' prior: 50338714!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover initializeWith: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:04' prior: 50338726!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new initializeWith: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:46' prior: 50338733!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover new initializeWith: 0@0.
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:17:04' prior: 50338740!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover initializeWith: 0@0.
	! !

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:29:55'!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:01'!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:09'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'NR 9/16/2021 17:40:17'!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:20'!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:24'!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:26'!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:31'!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:44'!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:10:15' overrides: 16920235!
initialize
	^Base new.
	
! !

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack class
	instanceVariableNames: ''!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack class
	instanceVariableNames: ''!
!OOStack class methodsFor: 'error descriptions' stamp: 'NR 9/14/2023 08:12:21'!
stackEmptyErrorDescription
	
	^ 'stack is empty!!!!!!'! !

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:02:43'!
getNext
	^next! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 18:06:27'!
isEmpty
	^next isEmpty! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:06:11'!
pop
	^next pop! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:18:22'!
popeate
	^OOStack error: OOStack stackEmptyErrorDescription ! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 16:22:21'!
push: anElement
	next push: anElement! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:03:57'!
setNext: anElement
	next := anElement 
! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:26:32'!
top
	^next top! !
!Base methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:45:31' overrides: 50338891!
initialize
	next := Tope with: self.! !

!classDefinition: 'Base class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Base class
	instanceVariableNames: ''!

!classDefinition: 'Base class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Base class
	instanceVariableNames: ''!
!Base class methodsFor: 'as yet unclassified' stamp: 'zm 9/17/2023 18:48:16'!
with: anElement
	^Base new initializeWith: anElement! !

!classDefinition: #Elemento category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Elemento category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:52:11' overrides: 50338891!
initialize! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 19:00:54'!
with: anElement despuesDe: prevElement

	prev := prevElement .
	info := anElement. 
	next := prevElement getNext! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:56'!
getInfo
	^info! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:01:19'!
getNext
	^next! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:05:17'!
isEmpty
	^false
		

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:14:28'!
pop
	^next pop
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:25:30'!
popeate
	prev setNext: next.
	next setUltimo: prev.
	^ info
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:00:34'!
push: anElement
	next push: anElement .
	

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:57:23'!
setNext: anElement
	next := anElement 
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:26:49'!
top
	^next top
! !

!classDefinition: 'Elemento class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Elemento class
	instanceVariableNames: ''!

!classDefinition: 'Elemento class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Elemento class
	instanceVariableNames: ''!
!Elemento class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:51:03'!
with: anElement despuesDe: prevElement

	^Elemento new with: anElement despuesDe: prevElement
! !

!classDefinition: #Tope category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Tope category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:06:51'!
isEmpty
	^true! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:18:48'!
pop
	^ultimo popeate! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:56:08'!
push: anElement
	|newElement|
	newElement := Elemento with: anElement despuesDe: ultimo.
	ultimo setNext: newElement.
	ultimo := newElement.


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:22:11'!
setUltimo: nuevoUltimo
	ultimo := nuevoUltimo 


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:42'!
top
	^ultimo getInfo! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 16:45:54' overrides: 50338891!
initialize


	! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:36:41'!
initializeWithUltimo: aPrev
	ultimo := aPrev


	! !

!classDefinition: 'Tope class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Tope class
	instanceVariableNames: ''!

!classDefinition: 'Tope class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Tope class
	instanceVariableNames: ''!
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:40:29'!
initializeWithUltimo: aPrev
	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:49:49'!
with: ultimo
	^Tope new initializeWithUltimo: ultimo

	
	! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:07:35' prior: 50338223!
test01ProcessEmptyCommandListDoesNothing
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:08:07' prior: 50338232!
test02processOneFowardCommandMovesTheRoverOnePositionFoward
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'f'.
		
	self assert: (rover isInPosition: (0@1) pointingTo: #North).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:11:56' prior: 50338242!
test03ProcessOneBackwardsCommandMovesTheRoverOnePositionBackwards
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'b'.
		
	self assert: (rover isInPosition: (0@-1) pointingTo: #North).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:11:44' prior: 50338252!
test04ProcessManyBackwardsFowardCommands
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'ff'.
		
	self assert: (rover isInPosition: (0@2) pointingTo: #North).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/8/2023 12:39:39' prior: 50338261!
test05ProcessOneLeftCommandRotatesTheRoverToTheLeftOnce
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'l'.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #West).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:14:36' prior: 50338271!
test06ProcessManyLeftCommandRotatesTheRoverToTheLeftTwice
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'll'.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #South).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:13:36' prior: 50338281!
test07ProcessOneRightCommandRotatesTheRoverToTheRightOnce
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'r'.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #East).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:14:19' prior: 50338291!
test08ProcessManyRightCommandRotatesTheRoverToTheLeftMany
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'rr'.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #South).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:16:03' prior: 50338301!
test09ProcessRightAndFowardCommandsMovesAndRotatesTheRover
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'rf'.
		
	self assert: (rover isInPosition: (1@0) pointingTo: #East).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:16:30' prior: 50338311!
test10ProcessLeftAndFowardCommandsMovesAndRotatesTheRover
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'lf'.
		
	self assert: (rover isInPosition: (-1@0) pointingTo: #West).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:17:04' prior: 50338321!
test11ProcessLeftAndBackwardsCommandMovesAndRotatesTheRover
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'lb'.
		
	self assert: (rover isInPosition: (1@0) pointingTo: #West).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:18:04' prior: 50338331!
test12ProcessManyRotationAndMovementCommands
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'rbrb'.
		
	self assert: (rover isInPosition: (-1@1) pointingTo: #South).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:18:55' prior: 50338340!
test13UnknownCommandDoesNothing
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: '?'.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Joaco 10/7/2023 17:18:49' prior: 50338349!
test14UnknownCommandCutsCommandProcessing
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: North new.
	rover process: 'frf?flf'.
		
	self assert: (rover isInPosition: (1@1) pointingTo: #East).! !

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:58' prior: 50338370!
nextPositionBackwardsFromPostion: aPosition 
	self subclassResponsibility .! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:38:43' prior: 50338375!
nextPositionFowardFromPosition: aPosition 
	self subclassResponsibility.! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:20' prior: 50338380!
toMyLeft

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:06' prior: 50338384!
toMyRight

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:04:08' prior: 50338389 overrides: 16902254!
value
	^value.! !

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' prior: 50338403 overrides: 50339270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' prior: 50338408 overrides: 50339276!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' prior: 50338413 overrides: 50339282!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' prior: 50338417 overrides: 50339287!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' prior: 50338421 overrides: 16920235!
initialize
	value := #East.! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' prior: 50338436 overrides: 50339270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' prior: 50338441 overrides: 50339276!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' prior: 50338446 overrides: 50339282!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' prior: 50338450 overrides: 50339287!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' prior: 50338454 overrides: 16920235!
initialize
	value := #North.! !

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' prior: 50338469 overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' prior: 50338473 overrides: 50339270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' prior: 50338478 overrides: 50339276!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' prior: 50338483 overrides: 50339282!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' prior: 50338487 overrides: 50339287!
toMyRight
	^West new.! !

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' prior: 50338502 overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' prior: 50338506 overrides: 50339270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' prior: 50338511 overrides: 50339276!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' prior: 50338516 overrides: 50339282!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' prior: 50338520 overrides: 50339287!
toMyRight
	^North new.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47' prior: 50338535!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23' prior: 50338541!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'Procesing' stamp: 'Joaco 10/7/2023 17:06:32' prior: 50338548!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction nextPositionFowardFromPosition:  position ].
		aCommand = $b ifTrue: [ position := direction nextPositionBackwardsFromPostion: position ].	
		aCommand = $l ifTrue: [ direction :=  direction toMyLeft].
		aCommand = $r ifTrue: [ direction := direction toMyRight ].
		].
! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14' prior: 50338564!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !

!classDefinition: 'MarsRover class' category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
MarsRover class
	instanceVariableNames: ''!

!classDefinition: 'MarsRover class' category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
MarsRover class
	instanceVariableNames: ''!
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28' prior: 50338578!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:28:38' prior: 50338747!
test01InitializingRoverAndItStaysInThatSpot
	|myRover rover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).

	! !

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:30:39' prior: 50339511!
withPosition: aRenameMe1 andDirection: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPosition: aRenameMe1 andDirection: aRenameMe2 ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:31:09' prior: 50339598!
withPosition: aPosition andDirection: aDirection 
	^self new initializeWithPosition: aPosition andDirection: aDirection ! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 16:52:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:23' prior: 50339496!
initializeWithPosition: aPosition andDirection: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:29' prior: 50339629!
initializeWithPosition: aPosition andDirection: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:00' prior: 50339479!
process: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:15' prior: 50339644!
process: aComand 
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:32:46' prior: 50339524!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position: (0@0) direction: #North).

	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:33:41'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:12' prior: 50339653!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North))

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:15' prior: 50339667!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North)).

	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:25'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:29' prior: 50339688!
position
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:51'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:54' prior: 50339696!
direction
	^direction! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:36:47' prior: 50339678!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position equals: (0@0)).
	self assert: (myRover direction equals: (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:37:26' prior: 50339705!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!methodRemoval: MarsRover #position:direction: stamp: 'zm 10/9/2023 16:52:13'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:16' prior: 50339716!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:39' prior: 50339732!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !

!classRemoval: #CardinalPoint stamp: 'zm 10/9/2023 16:52:37'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRover stamp: 'zm 10/9/2023 16:53:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #West stamp: 'zm 10/9/2023 16:53:13'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #South stamp: 'zm 10/9/2023 16:53:13'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #North stamp: 'zm 10/9/2023 16:53:13'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #East stamp: 'zm 10/9/2023 16:53:13'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Compass stamp: 'zm 10/9/2023 16:53:13'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTests stamp: 'zm 10/9/2023 16:53:14'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'zm 10/9/2023 16:53:14'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Holliday stamp: 'zm 10/9/2023 16:53:17'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #Day stamp: 'zm 10/9/2023 16:53:17'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #AnualCalendar stamp: 'zm 10/9/2023 16:53:17'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #AnualCalendarTests stamp: 'zm 10/9/2023 16:53:17'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #SentenceFinderByPrefix stamp: 'zm 10/9/2023 16:53:20'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Tope stamp: 'zm 10/9/2023 16:53:20'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Elemento stamp: 'zm 10/9/2023 16:53:21'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Base stamp: 'zm 10/9/2023 16:53:21'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'zm 10/9/2023 16:53:21'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'zm 10/9/2023 16:53:21'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'zm 10/9/2023 16:53:21'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'zm 10/9/2023 16:56:05'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'zm 10/9/2023 16:56:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: 'Calendar' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendar category: 'Calendar' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Day category: 'Calendar' stamp: 'zm 10/9/2023 17:00:58'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Holliday category: 'Calendar' stamp: 'zm 10/9/2023 17:00:58'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendarTests category: 'Calendar' stamp: 'zm 10/9/2023 17:00:58'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:14:45'!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new startsin: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:14' prior: 50339940!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover startsin: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:48' prior: 50339947!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover initializeWith: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:04' prior: 50339954!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new initializeWith: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:46' prior: 50339961!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover new initializeWith: 0@0.
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:17:04' prior: 50339968!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover initializeWith: 0@0.
	! !

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:29:55'!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:01'!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:09'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'NR 9/16/2021 17:40:17'!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:20'!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:24'!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:26'!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:31'!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:44'!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:10:15' overrides: 16920235!
initialize
	^Base new.
	
! !

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
OOStack class
	instanceVariableNames: ''!
!OOStack class methodsFor: 'error descriptions' stamp: 'NR 9/14/2023 08:12:21'!
stackEmptyErrorDescription
	
	^ 'stack is empty!!!!!!'! !

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:02:43'!
getNext
	^next! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 18:06:27'!
isEmpty
	^next isEmpty! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:06:11'!
pop
	^next pop! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:18:22'!
popeate
	^OOStack error: OOStack stackEmptyErrorDescription ! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 16:22:21'!
push: anElement
	next push: anElement! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:03:57'!
setNext: anElement
	next := anElement 
! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:26:32'!
top
	^next top! !
!Base methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:45:31' overrides: 50340097!
initialize
	next := Tope with: self.! !

!classDefinition: 'Base class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
Base class
	instanceVariableNames: ''!
!Base class methodsFor: 'as yet unclassified' stamp: 'zm 9/17/2023 18:48:16'!
with: anElement
	^Base new initializeWith: anElement! !

!classDefinition: #Elemento category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:52:11' overrides: 50340097!
initialize! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 19:00:54'!
with: anElement despuesDe: prevElement

	prev := prevElement .
	info := anElement. 
	next := prevElement getNext! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:56'!
getInfo
	^info! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:01:19'!
getNext
	^next! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:05:17'!
isEmpty
	^false
		

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:14:28'!
pop
	^next pop
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:25:30'!
popeate
	prev setNext: next.
	next setUltimo: prev.
	^ info
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:00:34'!
push: anElement
	next push: anElement .
	

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:57:23'!
setNext: anElement
	next := anElement 
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:26:49'!
top
	^next top
! !

!classDefinition: 'Elemento class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
Elemento class
	instanceVariableNames: ''!
!Elemento class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:51:03'!
with: anElement despuesDe: prevElement

	^Elemento new with: anElement despuesDe: prevElement
! !

!classDefinition: #Tope category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:06:51'!
isEmpty
	^true! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:18:48'!
pop
	^ultimo popeate! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:56:08'!
push: anElement
	|newElement|
	newElement := Elemento with: anElement despuesDe: ultimo.
	ultimo setNext: newElement.
	ultimo := newElement.


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:22:11'!
setUltimo: nuevoUltimo
	ultimo := nuevoUltimo 


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:42'!
top
	^ultimo getInfo! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 16:45:54' overrides: 50340097!
initialize


	! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:36:41'!
initializeWithUltimo: aPrev
	ultimo := aPrev


	! !

!classDefinition: 'Tope class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
Tope class
	instanceVariableNames: ''!
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:40:29'!
initializeWithUltimo: aPrev
	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:49:49'!
with: ultimo
	^Tope new initializeWithUltimo: ultimo

	
	! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:58'!
nextPositionBackwardsFromPostion: aPosition 
	self subclassResponsibility .! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:38:43'!
nextPositionFowardFromPosition: aPosition 
	self subclassResponsibility.! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:20'!
toMyLeft

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:06'!
toMyRight

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:04:08' overrides: 16902254!
value
	^value.! !

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' overrides: 50340270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' overrides: 50340275!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' overrides: 50340280!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' overrides: 50340284!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' overrides: 16920235!
initialize
	value := #East.! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' overrides: 50340270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' overrides: 50340275!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' overrides: 50340280!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' overrides: 50340284!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' overrides: 16920235!
initialize
	value := #North.! !

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' overrides: 50340270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' overrides: 50340275!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' overrides: 50340280!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' overrides: 50340284!
toMyRight
	^West new.! !

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' overrides: 50340270!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' overrides: 50340275!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' overrides: 50340280!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' overrides: 50340284!
toMyRight
	^North new.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47'!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23'!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'Procesing' stamp: 'Joaco 10/7/2023 17:06:32'!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction nextPositionFowardFromPosition:  position ].
		aCommand = $b ifTrue: [ position := direction nextPositionBackwardsFromPostion: position ].	
		aCommand = $l ifTrue: [ direction :=  direction toMyLeft].
		aCommand = $r ifTrue: [ direction := direction toMyRight ].
		].
! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14'!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !

!classDefinition: 'MarsRover class' category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
MarsRover class
	instanceVariableNames: ''!
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28'!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:28:38' prior: 50339975!
test01InitializingRoverAndItStaysInThatSpot
	|myRover rover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).

	! !

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:30:39' prior: 50340455!
withPosition: aRenameMe1 andDirection: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPosition: aRenameMe1 andDirection: aRenameMe2 ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:31:09' prior: 50340510!
withPosition: aPosition andDirection: aDirection 
	^self new initializeWithPosition: aPosition andDirection: aDirection ! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:23' prior: 50340444!
initializeWithPosition: aPosition andDirection: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:29' prior: 50340541!
initializeWithPosition: aPosition andDirection: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:00' prior: 50340428!
process: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:15' prior: 50340556!
process: aComand 
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:32:46' prior: 50340468!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position: (0@0) direction: #North).

	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:33:41'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:12' prior: 50340565!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North))

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:15' prior: 50340579!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North)).

	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:25'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:29' prior: 50340600!
position
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:51'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:54' prior: 50340608!
direction
	^direction! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:36:47' prior: 50340590!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position equals: (0@0)).
	self assert: (myRover direction equals: (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:37:26' prior: 50340617!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!methodRemoval: MarsRover #position:direction: stamp: 'zm 10/9/2023 17:00:58'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:16' prior: 50340628!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:39' prior: 50340644!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:43:37' prior: 50340655!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:44:01' prior: 50340666!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North new)).

	! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Compass subclass: #North
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!North methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:45:52' prior: 50340346 overrides: 16920235!
initialize
	value := #North.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:46:13' prior: 50340677!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:58'!
Object subclass: #Compass
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Compass methodsFor: 'values' stamp: 'zm 10/9/2023 14:48:47' overrides: 16902254!
value
	^value.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:02:33' prior: 50340699!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North value)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:02:39' prior: 50340727!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North value)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:08:58' prior: 50340738!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North value)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:09:03' prior: 50340749!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:10:03' prior: 50340760!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).

	! !
!South methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:00' prior: 50340357 overrides: 16920235!
initialize
	value := #South.! !
!West methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:32' prior: 50340386 overrides: 16920235!
initialize
	value := #West.! !
!East methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:49' prior: 50340317 overrides: 16920235!
initialize
	value := #East.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:14:53'!
test02ProccessMovesTheRoverToTheCorrectPosition
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:16:06' prior: 50340797!
test02ProccessMovesTheRoverToTheCorrectPosition
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:21:29' prior: 50340561!
process: aComand 
	(aComand = $f) ifTrue: [	 position := direction goForward: position ]
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:22:46' prior: 50340817!
process: aComand 
	(aComand = $f) ifTrue: [	 position := direction goUp: position ]
	! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:25:17'!
goUp: coordinates
	^coordinates + (0@1)! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:27:52' prior: 50340823!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ]
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:28:33'!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPosition stamp: 'zm 10/9/2023 17:00:58'!
test02ProccessMovesTheRoverToTheCorrectPosition
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:15'!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:18' prior: 50340856!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:27' prior: 50340866!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:29:30'!
test03ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 17:00:58'!
test02ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:30:29' prior: 50340832!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ].
	(aComand = 'b') ifTrue: [	 position := direction goDown: position ].

	! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:30:44'!
goDown: aPosition 
	self shouldBeImplemented.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:31:09' prior: 50340912!
goDown: aPosition 
	^aPosition - (0@0)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:31:44' prior: 50340916!
goDown: aPosition 
	^aPosition - (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:12'!
goUp: coordinates
	^coordinates + (0@1)! !

!methodRemoval: North #goUp: stamp: 'zm 10/9/2023 17:00:58'!
goUp: coordinates
	^coordinates + (0@1)!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:18'!
goDown: aPosition 
	^aPosition - (0@1)! !

!methodRemoval: North #goDown: stamp: 'zm 10/9/2023 17:00:58'!
goDown: aPosition 
	^aPosition - (0@1)!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:32' prior: 50340931!
goDown: coordinates 
	^coordinates - (0@1)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50340924!
goUp: coordinates
	^coordinates + (0@1)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50340924!
goUp: coordinates
	^coordinates + (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50340924!
goUp: coordinates
	^coordinates + (0@1)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' overrides: 50340924!
goUp: coordinates
	^coordinates + (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' prior: 50340924!
goUp: coordinates

	self subclassResponsibility! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50340938!
goDown: coordinates 
	^coordinates - (0@1)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50340938!
goDown: coordinates 
	^coordinates - (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50340938!
goDown: coordinates 
	^coordinates - (0@1)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' overrides: 50340938!
goDown: coordinates 
	^coordinates - (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' prior: 50340938!
goDown: coordinates

	self subclassResponsibility! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:36:25' prior: 50340837!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:37:06' prior: 50340983!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:37:35' prior: 50340950 overrides: 50340958!
goUp: coordinates
	^coordinates - (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:37:44' prior: 50340970 overrides: 50340978!
goDown: coordinates 
	^coordinates + (0@1)! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:38:40' prior: 50340997!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:09'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForward stamp: 'zm 10/9/2023 17:00:58'!
test02ProccessMovesTheRoverToTheCorrectPositionForward
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:23' prior: 50341039!
test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:45'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:39:54'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).

	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:16'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:25'!
test03ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:00:58'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:46'!
test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	! !

!methodRemoval: MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:00:58'!
test02ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:40:55'!
test04ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !

!methodRemoval: MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:00:58'!
test03ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:41:03'!
test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	! !

!methodRemoval: MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:00:58'!
test04ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:41:20'!
test06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test03ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 17:00:58'!
test03ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:41:22'!
stest06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #stest06ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 17:00:58'!
stest06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:42:06' prior: 50341103!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (-1@0)).
	
	! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:29' prior: 50340946 overrides: 50340958!
goUp: coordinates
	^coordinates - (1@0)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:44' prior: 50340966 overrides: 50340978!
goDown: coordinates 
	^coordinates + (1@0)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:58' prior: 50340942 overrides: 50340958!
goUp: coordinates
	^coordinates + (1@0)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:43:12' prior: 50340962 overrides: 50340978!
goDown: coordinates 
	^coordinates - (1@0)! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:43:32' prior: 50341094!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (1@0)).

	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:43:40'!
test06ProccessMovesTheRoverToTheCorrectPositionBackNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBack stamp: 'zm 10/9/2023 17:00:58'!
test06ProccessMovesTheRoverToTheCorrectPositionBack
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:43:51'!
test06ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:44:05'!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !

!methodRemoval: MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:00:58'!
test06ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:44:15' prior: 50341298!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:44:29' prior: 50341318!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@0)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:45:22' prior: 50341328!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:45:38'!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:46:13' prior: 50341347!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (-1@0)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:46:42'!
test09ProccessMovesTheRoverToTheCorrectPositionBackWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:01' prior: 50341261!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#East)).


	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:15' prior: 50341231!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#West)).

	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:25' prior: 50341132!
test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:30' prior: 50341172!
test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#North)).! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:41' prior: 50341270!
test06ProccessMovesTheRoverToTheCorrectPositionBackNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).
	self assert: (myRover direction value = (#North)).
	

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:45' prior: 50341338!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:55' prior: 50341431!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#South)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:48:02' prior: 50341357!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#East)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:48:09' prior: 50341366!
test09ProccessMovesTheRoverToTheCorrectPositionBackWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:04'!
test10ProccessLeftMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:12' prior: 50341475!
test10ProccessLeftMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:41'!
test10ProccessLeftMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:00:58'!
test10ProccessLeftMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:50:49' prior: 50341496!
test10ProccessLeftMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 15:51:30' prior: 50340905!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ].
	(aComand = 'b') ifTrue: [	 position := direction goDown: position ].
	(aComand = 'l' ifTrue: [ direction :=  direction goLeft: position])

	! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:51:47'!
goLeft: aPosition 
	self shouldBeImplemented.! !

!methodRemoval: North #goLeft: stamp: 'zm 10/9/2023 17:00:58'!
goLeft: aPosition 
	self shouldBeImplemented.!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:24'!
goLeft: coordinates

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:31'!
goRight: coordinates

	self subclassResponsibility! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50341550!
goRight: coordinates

	self subclassResponsibility! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50341550!
goRight: coordinates

	self subclassResponsibility! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50341550!
goRight: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' overrides: 50341550!
goRight: coordinates

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:37' prior: 50341550!
goRight: coordinates

	self subclassResponsibility! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50341546!
goLeft: coordinates

	self subclassResponsibility! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50341546!
goLeft: coordinates

	self subclassResponsibility! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50341546!
goLeft: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' overrides: 50341546!
goLeft: coordinates

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:52:47' prior: 50341546!
goLeft: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:53:22' prior: 50341595 overrides: 50341600!
goLeft: coordinates
	^West new.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:53:48'!
test10ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectly stamp: 'zm 10/9/2023 17:00:58'!
test10ProccessLeftMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:54:02'!
test10ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:54:28' prior: 50341590 overrides: 50341600!
goLeft: coordinates
	^East new.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:54:48'!
test10ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:54:57' prior: 50341646!
test10ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:55:57' prior: 50341585 overrides: 50341600!
goLeft: coordinates
	^South new.! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:56:49' prior: 50341580 overrides: 50341600!
goLeft: coordinates
	^North new.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:57:26'!
test10ProccessLeftMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:57:52'!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:01'!
test11ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:00:58'!
test10ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:07'!
test12ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:00:58'!
test10ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:17'!
test14ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !

!methodRemoval: MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:00:58'!
test10ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:27'!
test13ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !

!methodRemoval: MarsRoverTests #test14ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:00:58'!
test14ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:43'!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:55'!
test14ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:59:01'!
test14ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:59:14'!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test14ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:00:58'!
test14ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:59:21'!
test17ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test14ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:00:58'!
test14ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:59:47' prior: 50341555 overrides: 50341575!
goRight: coordinates
	^South new.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:00:02' prior: 50341570 overrides: 50341575!
goRight: coordinates
	^East new.! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:00:16' prior: 50341565 overrides: 50341575!
goRight: coordinates
	^West new.! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:00:29' prior: 50341560 overrides: 50341575!
goRight: coordinates
	^North new.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:47' prior: 50341842!
test17ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:52' prior: 50341820!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:56' prior: 50341688!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:01' prior: 50341787!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:05' prior: 50341917!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:22' prior: 50341928!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:02:31' prior: 50341529!
process: aComand 
	(aComand = 'f') ifTrue: [	 position := direction goUp: position ].
	(aComand = 'b') ifTrue: [	 position := direction goDown: position ].
	(aComand = 'l') ifTrue: [ direction :=  direction goLeft: position].
	(aComand = 'r' )ifTrue: [ direction :=  direction goRight: position].
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:02:56' prior: 50341906!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:03:04' prior: 50341963!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:03:19' prior: 50341974!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:04:24' prior: 50341895!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:31'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyM
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:34'!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyM stamp: 'zm 10/9/2023 17:00:59'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyM
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:50' prior: 50342018!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:05:55' prior: 50342041!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (2@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:07:17' prior: 50341950!
process: comands 
	comands do: [ :aCommand |  
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft: position].
		aCommand = $r ifTrue: [ direction := direction goRight: position ].
		].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:08:01' prior: 50342063!
process: comands 
	comands do: [ :aCommand |
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft: position].
		aCommand = $r ifTrue: [ direction := direction goRight: position ].
		].! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:08:53' prior: 50342052!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:10'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectly stamp: 'zm 10/9/2023 17:00:59'!
test18ProccessMultipleCommandsMovesThePositionCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:25'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:00:59'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:47'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:55' prior: 50342146!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:03' prior: 50342158!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@-2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:17'!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@-2)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:00:59'!
test18ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@-2)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:49' prior: 50342181!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:59' prior: 50342205!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:13'!
test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:27' prior: 50342228!
test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'll'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:56'!
test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'll'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:14:20'!
test21ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnn'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:07' prior: 50342262!
test21ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnnr'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:18'!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnnr'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:30' prior: 50342284!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffffflfffffflffff'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:16:07' prior: 50342296!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffffflfffffflffff'.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:17:14' prior: 50342076!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:18:30' prior: 50342320!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self isInvalidRoverCommand]) value.
	    ].! !
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:18:44'!
isInvalidRoverCommand
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:18:59' prior: 50342357!
isInvalidRoverCommand
	^'InvalidCommand'! !
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:19:19'!
InvalidMarsRoverCommand
	^'InvalidCommand'! !

!methodRemoval: MarsRover #isInvalidRoverCommand stamp: 'zm 10/9/2023 17:00:59'!
isInvalidRoverCommand
	^'InvalidCommand'!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:19:37' prior: 50342338!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self InvalidMarsRoverCommand ]) value.
	    ].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:19:41' prior: 50342374!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self InvalidMarsRoverCommand]) value.
	    ].! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:19:54' prior: 50342308!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'kkkk'.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:21:27' prior: 50342393!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self invalidMarsRoverCommand]).
	    ].
! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:22:17' prior: 50342423!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [self invalidMarsRoverCommand]) value.
	    ].
! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:22:49' prior: 50342442!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].
! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:24:40' prior: 50342461!
process: commands
    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].
! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:30:20' prior: 50342479!
process: aCommandList
    | newPosition isValidCommand |
    aCommandList do: [:aCommand |
        isValidCommand := true.
        newPosition := self executeCommand: aCommand ifInvalid: [isValidCommand := false].
        isValidCommand ifTrue: [position := newPosition].
    ].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:33:03' prior: 50342497!
process: aCommandList
	    | commandHandlers |
	    commandHandlers := Dictionary new.
	    commandHandlers at: $f put: [ direction goUp: position ].
	    commandHandlers at: $b put: [ direction goDown: position ].
	    commandHandlers at: $l put: [ direction goLeft ].
	    commandHandlers at: $r put: [ direction goRight ].

	    aCommandList do: [:aCommand |
	        (commandHandlers at: aCommand ifAbsent: [self invalidMarsRoverCommand]) value.
	    ].! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:33:36'!
goLeft
	^South new.! !

!methodRemoval: West #goLeft: stamp: 'zm 10/9/2023 17:00:59'!
goLeft: coordinates
	^South new.!
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:33:56'!
goRight
	^North new.! !

!methodRemoval: West #goRight: stamp: 'zm 10/9/2023 17:00:59'!
goRight: coordinates
	^North new.!
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:07'!
goRight
	^West new.! !

!methodRemoval: South #goRight: stamp: 'zm 10/9/2023 17:00:59'!
goRight: coordinates
	^West new.!
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:17'!
goLeft
	^East new.! !

!methodRemoval: South #goLeft: stamp: 'zm 10/9/2023 17:00:59'!
goLeft: coordinates
	^East new.!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:45'!
goLeft
	^West new.! !

!methodRemoval: North #goLeft: stamp: 'zm 10/9/2023 17:00:59'!
goLeft: coordinates
	^West new.!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:51'!
goRight
	^East new.! !

!methodRemoval: North #goRight stamp: 'zm 10/9/2023 17:00:59'!
goRight
	^East new.!
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:03'!
goRight
	^East new.! !

!methodRemoval: North #goRight: stamp: 'zm 10/9/2023 17:00:59'!
goRight: coordinates
	^East new.!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:10'!
goLeft
	^North new.! !

!methodRemoval: East #goLeft: stamp: 'zm 10/9/2023 17:00:59'!
goLeft: coordinates
	^North new.!
!East methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:16'!
goRight
	^South new.! !

!methodRemoval: East #goRight: stamp: 'zm 10/9/2023 17:00:59'!
goRight: coordinates
	^South new.!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:36:44' prior: 50342509!
process: commands
	    | commandActions |
	    commandActions := Dictionary new.
	    commandActions at: $f put: [ position := direction goUp: position ].
	    commandActions at: $b put: [ position := direction goDown: position ].
	    commandActions at: $l put: [ direction := direction goLeft: position ].
	    commandActions at: $r put: [ direction := direction goRight: position ].

	    commands do: [ :aCommand |
	        (commandActions at: aCommand ifAbsent: [nil]) value.
	    ].! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:38:17' prior: 50342581!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction nextPositionFowardFromPosition:  position ].
		aCommand = $b ifTrue: [ position := direction nextPositionBackwardsFromPostion: position ].	
		aCommand = $l ifTrue: [ direction :=  direction toMyLeft].
		aCommand = $r ifTrue: [ direction := direction toMyRight ].
		].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:38:59' prior: 50342599!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self InvalidMarsRoverCommand aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 16:39:12'!
goLeft

	self subclassResponsibility! !

!methodRemoval: Compass #goLeft: stamp: 'zm 10/9/2023 17:00:59'!
goLeft: coordinates

	self subclassResponsibility!
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 16:39:19'!
goRight

	self subclassResponsibility! !

!methodRemoval: Compass #goRight: stamp: 'zm 10/9/2023 17:00:59'!
goRight: coordinates

	self subclassResponsibility!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:39:47' prior: 50342616!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self InvalidMarsRoverCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:40:05' prior: 50342645!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(false) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:40:18' prior: 50342412!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: ''.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:42:23' prior: 50342674!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (-3@-6)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:43:21' prior: 50342685!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:43:43' prior: 50342697!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:44:00'!
test22ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:45:14' prior: 50342660!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isCommandValid: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft].
		aCommand = $r ifTrue: [ direction := direction goRight].
		].! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:46:14'!
isCoValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:46:18'!
isCommandValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !

!methodRemoval: MarsRover #isCoValid: stamp: 'zm 10/9/2023 17:00:59'!
isCoValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:46:52'!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !

!methodRemoval: MarsRoverTests #test22ProccessInvalidComand stamp: 'zm 10/9/2023 17:00:59'!
test22ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:47:36' prior: 50342764!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'fxf'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:47:50' prior: 50342785!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:58' prior: 50340270!
nextPositionBackwardsFromPostion: aPosition 
	self subclassResponsibility .! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:38:43' prior: 50340275!
nextPositionFowardFromPosition: aPosition 
	self subclassResponsibility.! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:20' prior: 50340280!
toMyLeft

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:06' prior: 50340284!
toMyRight

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:04:08' prior: 50340289 overrides: 16902254!
value
	^value.! !

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' prior: 50340299 overrides: 50342812!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' prior: 50340304 overrides: 50342818!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' prior: 50340309 overrides: 50342824!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' prior: 50340313 overrides: 50342829!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' prior: 50340793 overrides: 16920235!
initialize
	value := #East.! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' prior: 50340328 overrides: 50342812!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' prior: 50340333 overrides: 50342818!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' prior: 50340338 overrides: 50342824!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' prior: 50340342 overrides: 50342829!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' prior: 50340695 overrides: 16920235!
initialize
	value := #North.! !

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' prior: 50340783 overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' prior: 50340361 overrides: 50342812!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' prior: 50340366 overrides: 50342818!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' prior: 50340371 overrides: 50342824!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' prior: 50340375 overrides: 50342829!
toMyRight
	^West new.! !

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' prior: 50340788 overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' prior: 50340390 overrides: 50342812!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' prior: 50340395 overrides: 50342818!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' prior: 50340400 overrides: 50342824!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' prior: 50340404 overrides: 50342829!
toMyRight
	^North new.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47' prior: 50340415!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23' prior: 50340421!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'Procesing' stamp: 'zm 10/9/2023 16:38:17' prior: 50342730!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction nextPositionFowardFromPosition:  position ].
		aCommand = $b ifTrue: [ position := direction nextPositionBackwardsFromPostion: position ].	
		aCommand = $l ifTrue: [ direction :=  direction toMyLeft].
		aCommand = $r ifTrue: [ direction := direction toMyRight ].
		].! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14' prior: 50340549!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !

!classDefinition: 'MarsRover class' category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
MarsRover class
	instanceVariableNames: ''!
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28' prior: 50340520!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !

!classDefinition: #NameOfSubclass category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #NameOfSubclass category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendar category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendar category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Day category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Day category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Holliday category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #Holliday category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendarTests category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #AnualCalendarTests category: 'Calendar' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTests category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:14:45' prior: 50340771!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new startsin: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:14' prior: 50343130!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover startsin: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:15:48' prior: 50343137!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover initializeWith: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:04' prior: 50343144!
test01InitializingRoverAndItStaysInThatSpot
	|myRover north |
	myRover = MarsRover new initializeWith: 0@0 withDirection: north .
	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:16:46' prior: 50343151!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover new initializeWith: 0@0.
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 13:17:04' prior: 50343158!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	myRover = MarsRover initializeWith: 0@0.
	! !

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30' prior: 50339988!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:29:55' prior: 50339994!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:01' prior: 50340000!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:09' prior: 50340007!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'NR 9/16/2021 17:40:17' prior: 50340015!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:20' prior: 50340029!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:24' prior: 50340037!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:26' prior: 50340047!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:31' prior: 50340058!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:44' prior: 50340071!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:10:15' prior: 50340097 overrides: 16920235!
initialize
	^Base new.
	
! !

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack class
	instanceVariableNames: ''!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack class
	instanceVariableNames: ''!
!OOStack class methodsFor: 'error descriptions' stamp: 'NR 9/14/2023 08:12:21' prior: 50340105!
stackEmptyErrorDescription
	
	^ 'stack is empty!!!!!!'! !

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:02:43' prior: 50340116!
getNext
	^next! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 18:06:27' prior: 50340119!
isEmpty
	^next isEmpty! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:06:11' prior: 50340122!
pop
	^next pop! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:18:22' prior: 50340125!
popeate
	^OOStack error: OOStack stackEmptyErrorDescription ! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 16:22:21' prior: 50340129!
push: anElement
	next push: anElement! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:03:57' prior: 50340133!
setNext: anElement
	next := anElement 
! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:26:32' prior: 50340137!
top
	^next top! !
!Base methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:45:31' prior: 50340141 overrides: 50343316!
initialize
	next := Tope with: self.! !

!classDefinition: 'Base class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Base class
	instanceVariableNames: ''!

!classDefinition: 'Base class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Base class
	instanceVariableNames: ''!
!Base class methodsFor: 'as yet unclassified' stamp: 'zm 9/17/2023 18:48:16' prior: 50340149!
with: anElement
	^Base new initializeWith: anElement! !

!classDefinition: #Elemento category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Elemento category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:52:11' prior: 50340161 overrides: 50343316!
initialize! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 19:00:54' prior: 50340164!
with: anElement despuesDe: prevElement

	prev := prevElement .
	info := anElement. 
	next := prevElement getNext! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:56' prior: 50340170!
getInfo
	^info! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:01:19' prior: 50340173!
getNext
	^next! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:05:17' prior: 50340176!
isEmpty
	^false
		

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:14:28' prior: 50340179!
pop
	^next pop
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:25:30' prior: 50340182!
popeate
	prev setNext: next.
	next setUltimo: prev.
	^ info
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:00:34' prior: 50340186!
push: anElement
	next push: anElement .
	

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:57:23' prior: 50340190!
setNext: anElement
	next := anElement 
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:26:49' prior: 50340194!
top
	^next top
! !

!classDefinition: 'Elemento class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Elemento class
	instanceVariableNames: ''!

!classDefinition: 'Elemento class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Elemento class
	instanceVariableNames: ''!
!Elemento class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:51:03' prior: 50340202!
with: anElement despuesDe: prevElement

	^Elemento new with: anElement despuesDe: prevElement
! !

!classDefinition: #Tope category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Tope category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:06:51' prior: 50340214!
isEmpty
	^true! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:18:48' prior: 50340217!
pop
	^ultimo popeate! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:56:08' prior: 50340220!
push: anElement
	|newElement|
	newElement := Elemento with: anElement despuesDe: ultimo.
	ultimo setNext: newElement.
	ultimo := newElement.


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:22:11' prior: 50340227!
setUltimo: nuevoUltimo
	ultimo := nuevoUltimo 


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:42' prior: 50340231!
top
	^ultimo getInfo! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 16:45:54' prior: 50340235 overrides: 50343316!
initialize


	! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:36:41' prior: 50340238!
initializeWithUltimo: aPrev
	ultimo := aPrev


	! !

!classDefinition: 'Tope class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Tope class
	instanceVariableNames: ''!

!classDefinition: 'Tope class' category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Tope class
	instanceVariableNames: ''!
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:40:29' prior: 50340247!
initializeWithUltimo: aPrev
	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:49:49' prior: 50340251!
with: ultimo
	^Tope new initializeWithUltimo: ultimo

	
	! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:58' prior: 50342812!
nextPositionBackwardsFromPostion: aPosition 
	self subclassResponsibility .! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:38:43' prior: 50342818!
nextPositionFowardFromPosition: aPosition 
	self subclassResponsibility.! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:20' prior: 50342824!
toMyLeft

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:06' prior: 50342829!
toMyRight

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:04:08' prior: 50342834 overrides: 16902254!
value
	^value.! !

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' prior: 50342845 overrides: 50343556!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' prior: 50342851 overrides: 50343562!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' prior: 50342857 overrides: 50343568!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' prior: 50342861 overrides: 50343573!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' prior: 50342866 overrides: 16920235!
initialize
	value := #East.! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' prior: 50342877 overrides: 50343556!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' prior: 50342883 overrides: 50343562!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' prior: 50342889 overrides: 50343568!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' prior: 50342893 overrides: 50343573!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' prior: 50342898 overrides: 16920235!
initialize
	value := #North.! !

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' prior: 50342909 overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' prior: 50342914 overrides: 50343556!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' prior: 50342920 overrides: 50343562!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' prior: 50342926 overrides: 50343568!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' prior: 50342930 overrides: 50343573!
toMyRight
	^West new.! !

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' prior: 50342941 overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' prior: 50342946 overrides: 50343556!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' prior: 50342952 overrides: 50343562!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' prior: 50342958 overrides: 50343568!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' prior: 50342962 overrides: 50343573!
toMyRight
	^North new.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47' prior: 50342973!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23' prior: 50342980!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'Procesing' stamp: 'Joaco 10/7/2023 17:06:32' prior: 50342988!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction nextPositionFowardFromPosition:  position ].
		aCommand = $b ifTrue: [ position := direction nextPositionBackwardsFromPostion: position ].	
		aCommand = $l ifTrue: [ direction :=  direction toMyLeft].
		aCommand = $r ifTrue: [ direction := direction toMyRight ].
		].
! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14' prior: 50343005!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !

!classDefinition: 'MarsRover class' category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
MarsRover class
	instanceVariableNames: ''!

!classDefinition: 'MarsRover class' category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
MarsRover class
	instanceVariableNames: ''!
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28' prior: 50343016!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:28:38' prior: 50343165!
test01InitializingRoverAndItStaysInThatSpot
	|myRover rover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).

	! !

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Compass subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:30:39' prior: 50343797!
withPosition: aRenameMe1 andDirection: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPosition: aRenameMe1 andDirection: aRenameMe2 ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:31:09' prior: 50343884!
withPosition: aPosition andDirection: aDirection 
	^self new initializeWithPosition: aPosition andDirection: aDirection ! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'zm 10/9/2023 17:00:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:23' prior: 50343782!
initializeWithPosition: aPosition andDirection: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:29' prior: 50343915!
initializeWithPosition: aPosition andDirection: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:00' prior: 50343765!
process: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:15' prior: 50343930!
process: aComand 
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:32:46' prior: 50343810!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position: (0@0) direction: #North).

	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:33:41'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:12' prior: 50343939!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North))

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:35:15' prior: 50343953!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position == (0@0)).
	self assert: (myRover direction ==(#North)).

	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:25' prior: 50340605!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:29' prior: 50343975!
position
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:51' prior: 50340613!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:54' prior: 50343984!
direction
	^direction! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:36:47' prior: 50343964!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position equals: (0@0)).
	self assert: (myRover direction equals: (#North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:37:26' prior: 50343993!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!methodRemoval: MarsRover #position:direction: stamp: 'zm 10/9/2023 17:00:59'!
position: aRenameMe1 direction: aRenameMe2 
	self shouldBeImplemented.!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:16' prior: 50344004!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:39' prior: 50344020!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !

!classRemoval: #NameOfSubclass stamp: 'zm 10/9/2023 17:01:20'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'zm 10/9/2023 17:01:24'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #CardinalPoint stamp: 'zm 10/9/2023 17:01:40'!
Object subclass: #CardinalPoint
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Object methodsFor: 'as yet unclassified' stamp: 'zm 10/9/2023 13:15:30' prior: 50338721!
startsin: aRenameMe1 withDirection: north 
	self shouldBeImplemented.! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30' prior: 50343186!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:29:55' prior: 50343192!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:01' prior: 50343199!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:09' prior: 50343207!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'NR 9/16/2021 17:40:17' prior: 50343216!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:20' prior: 50343231!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:24' prior: 50343240!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:26' prior: 50343250!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:31' prior: 50343261!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:44' prior: 50343274!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStack methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:10:15' prior: 50343316 overrides: 16920235!
initialize
	^Base new.
	
! !
!OOStack class methodsFor: 'error descriptions' stamp: 'NR 9/14/2023 08:12:21' prior: 50343329!
stackEmptyErrorDescription
	
	^ 'stack is empty!!!!!!'! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:02:43' prior: 50343347!
getNext
	^next! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 18:06:27' prior: 50343351!
isEmpty
	^next isEmpty! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:06:11' prior: 50343355!
pop
	^next pop! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:18:22' prior: 50343359!
popeate
	^OOStack error: OOStack stackEmptyErrorDescription ! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 16:22:21' prior: 50343364!
push: anElement
	next push: anElement! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:03:57' prior: 50343368!
setNext: anElement
	next := anElement 
! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:26:32' prior: 50343372!
top
	^next top! !
!Base methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:45:31' prior: 50343376 overrides: 50344166!
initialize
	next := Tope with: self.! !
!Base class methodsFor: 'as yet unclassified' stamp: 'zm 9/17/2023 18:48:16' prior: 50343389!
with: anElement
	^Base new initializeWith: anElement! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:52:11' prior: 50343409 overrides: 50344166!
initialize! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 19:00:54' prior: 50343413!
with: anElement despuesDe: prevElement

	prev := prevElement .
	info := anElement. 
	next := prevElement getNext! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:56' prior: 50343420!
getInfo
	^info! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:01:19' prior: 50343423!
getNext
	^next! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:05:17' prior: 50343426!
isEmpty
	^false
		

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:14:28' prior: 50343430!
pop
	^next pop
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:25:30' prior: 50343434!
popeate
	prev setNext: next.
	next setUltimo: prev.
	^ info
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:00:34' prior: 50343439!
push: anElement
	next push: anElement .
	

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:57:23' prior: 50343443!
setNext: anElement
	next := anElement 
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:26:49' prior: 50343447!
top
	^next top
! !
!Elemento class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:51:03' prior: 50343460!
with: anElement despuesDe: prevElement

	^Elemento new with: anElement despuesDe: prevElement
! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:06:51' prior: 50343479!
isEmpty
	^true! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:18:48' prior: 50343482!
pop
	^ultimo popeate! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:56:08' prior: 50343486!
push: anElement
	|newElement|
	newElement := Elemento with: anElement despuesDe: ultimo.
	ultimo setNext: newElement.
	ultimo := newElement.


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:22:11' prior: 50343493!
setUltimo: nuevoUltimo
	ultimo := nuevoUltimo 


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:42' prior: 50343497!
top
	^ultimo getInfo! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 16:45:54' prior: 50343501 overrides: 50344166!
initialize


	! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:36:41' prior: 50343505!
initializeWithUltimo: aPrev
	ultimo := aPrev


	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:40:29' prior: 50343518!
initializeWithUltimo: aPrev
	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:49:49' prior: 50343522!
with: ultimo
	^Tope new initializeWithUltimo: ultimo

	
	! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' prior: 50343595!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' prior: 50343601!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' prior: 50343607!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' prior: 50343611!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' prior: 50343616 overrides: 16920235!
initialize
	value := #East.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' prior: 50343634!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' prior: 50343640!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' prior: 50343646!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' prior: 50343650!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' prior: 50343655 overrides: 16920235!
initialize
	value := #North.! !
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' prior: 50343673 overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' prior: 50343678!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' prior: 50343684!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' prior: 50343690!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' prior: 50343694!
toMyRight
	^West new.! !
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' prior: 50343711 overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' prior: 50343716!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' prior: 50343722!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' prior: 50343728!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' prior: 50343732!
toMyRight
	^North new.! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47' prior: 50343750!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23' prior: 50343757!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14' prior: 50343923!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28' prior: 50343894!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:31:09' prior: 50344417!
withPosition: aPosition andDirection: aDirection 
	^self new initializeWithPosition: aPosition andDirection: aDirection ! !
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:29' prior: 50344410!
initializeWithPosition: aPosition andDirection: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:15' prior: 50343935!
process: aComand 
	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:29' prior: 50343980!
position
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:54' prior: 50343989!
direction
	^direction! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:16' prior: 50344031!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:39' prior: 50344450!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!North methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:45:52' prior: 50344345 overrides: 16920235!
initialize
	value := #North.! !
!Compass methodsFor: 'values' stamp: 'zm 10/9/2023 14:48:47' prior: 50340723 overrides: 16902254!
value
	^value.! !
!South methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:00' prior: 50344350 overrides: 16920235!
initialize
	value := #South.! !
!West methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:32' prior: 50344373 overrides: 16920235!
initialize
	value := #West.! !
!East methodsFor: 'initialization' stamp: 'zm 10/9/2023 15:13:49' prior: 50344322 overrides: 16920235!
initialize
	value := #East.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:25:17' prior: 50340954 overrides: 50340958!
goUp: coordinates
	^coordinates + (0@1)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:31:44' prior: 50340974 overrides: 50340978!
goDown: aPosition 
	^aPosition - (0@1)! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' prior: 50344495 overrides: 50340958!
goUp: coordinates
	^coordinates + (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:33:41' prior: 50340958!
goUp: coordinates

	self subclassResponsibility! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' prior: 50344500 overrides: 50340978!
goDown: coordinates 
	^coordinates - (0@1)! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 15:35:25' prior: 50340978!
goDown: coordinates

	self subclassResponsibility! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:37:35' prior: 50341011 overrides: 50344509!
goUp: coordinates
	^coordinates - (0@1)! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 15:37:44' prior: 50341016 overrides: 50344518!
goDown: coordinates 
	^coordinates + (0@1)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:29' prior: 50341241 overrides: 50344509!
goUp: coordinates
	^coordinates - (1@0)! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:44' prior: 50341246 overrides: 50344518!
goDown: coordinates 
	^coordinates + (1@0)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:42:58' prior: 50341251 overrides: 50344509!
goUp: coordinates
	^coordinates + (1@0)! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 15:43:12' prior: 50341256 overrides: 50344518!
goDown: coordinates 
	^coordinates - (1@0)! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:01' prior: 50341376!
test02ProccessMovesTheRoverToTheCorrectPositionForwardEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'f'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#East)).


	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:15' prior: 50341387!
test02ProccessMovesTheRoverToTheCorrectPositionForwardWest
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'f'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#West)).

	
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:25' prior: 50341398!
test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth
	|myRover|
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@-1)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:30' prior: 50341409!
test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'f'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#North)).! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:41' prior: 50341420!
test06ProccessMovesTheRoverToTheCorrectPositionBackNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@-1)).
	self assert: (myRover direction value = (#North)).
	

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:47:55' prior: 50341442!
test07ProccessMovesTheRoverToTheCorrectPositionBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'b'.
		
	self assert: (myRover position = (0@1)).
	self assert: (myRover direction value = (#South)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:48:02' prior: 50341453!
test08ProccessMovesTheRoverToTheCorrectPositionBackEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'b'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#East)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:48:09' prior: 50341464!
test09ProccessMovesTheRoverToTheCorrectPositionBackWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'b'.
		
	self assert: (myRover position = (1@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:57:26' prior: 50341677!
test10ProccessLeftMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:01' prior: 50341699!
test11ProccessLeftMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:07' prior: 50341721!
test12ProccessLeftMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 15:58:27' prior: 50341765!
test13ProccessLeftMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'l'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:00:47' prior: 50341884!
test17ProccessRightMovesThePositionCorrectlyWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:01:22' prior: 50341939!
test14ProccessRightMovesThePositionCorrectlySouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:02:56' prior: 50341985!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:03:19' prior: 50344707!
test15ProccessRightMovesThePositionCorrectlyNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:04:24' prior: 50341996!
test16ProccessRightMovesThePositionCorrectlyEast
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: East new.
	myRover process: 'r'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:09:25' prior: 50342123!
test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:10:59' prior: 50342217!
test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: South new.
	myRover process: 'bb'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:27' prior: 50342240!
test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'll'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#South)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:11:56' prior: 50342251!
test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'll'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#East)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:15:07' prior: 50342273!
test21ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnnr'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRover methodsFor: 'error handling' stamp: 'zm 10/9/2023 16:19:19' prior: 50342366!
InvalidMarsRoverCommand
	^'InvalidCommand'! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:33:36' prior: 50342526 overrides: 50342630!
goLeft
	^South new.! !
!West methodsFor: 'move' stamp: 'zm 10/9/2023 16:33:56' prior: 50342532 overrides: 50342637!
goRight
	^North new.! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:07' prior: 50342538 overrides: 50342637!
goRight
	^West new.! !
!South methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:17' prior: 50342544 overrides: 50342630!
goLeft
	^East new.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:45' prior: 50342550 overrides: 50342630!
goLeft
	^West new.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:34:51' prior: 50342562 overrides: 50342637!
goRight
	^East new.! !
!North methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:03' prior: 50344825 overrides: 50342637!
goRight
	^East new.! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:10' prior: 50342568 overrides: 50342630!
goLeft
	^North new.! !
!East methodsFor: 'move' stamp: 'zm 10/9/2023 16:35:16' prior: 50342574 overrides: 50342637!
goRight
	^South new.! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 16:39:12' prior: 50342630!
goLeft

	self subclassResponsibility! !
!Compass methodsFor: 'move' stamp: 'zm 10/9/2023 16:39:19' prior: 50342637!
goRight

	self subclassResponsibility! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:43:43' prior: 50342709!
test22ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffffflffffflffffflfffff'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 16:46:18' prior: 50342751!
isCommandValid: aCommand
	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 16:47:50' prior: 50342795!
test23ProccessInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' prior: 50344303!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' prior: 50344308!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' prior: 50344313!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' prior: 50344317!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' prior: 50344491 overrides: 16920235!
initialize
	value := #East.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' prior: 50344326!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' prior: 50344331!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' prior: 50344336!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' prior: 50344340!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' prior: 50344472 overrides: 16920235!
initialize
	value := #North.! !
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' prior: 50344481 overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' prior: 50344354!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' prior: 50344359!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' prior: 50344364!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' prior: 50344368!
toMyRight
	^West new.! !
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' prior: 50344486 overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' prior: 50344377!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' prior: 50344382!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' prior: 50344387!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' prior: 50344391!
toMyRight
	^North new.! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47' prior: 50344395!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23' prior: 50344402!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14' prior: 50344431!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28' prior: 50344424!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !
!Object methodsFor: 'as yet unclassified' stamp: 'zm 10/9/2023 13:15:30' prior: 50344060!
startsin: aRenameMe1 withDirection: north 
	self shouldBeImplemented.! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30' prior: 50344066!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:29:55' prior: 50344072!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:01' prior: 50344079!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:09' prior: 50344087!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'NR 9/16/2021 17:40:17' prior: 50344096!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:20' prior: 50344111!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:24' prior: 50344120!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:26' prior: 50344130!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:31' prior: 50344141!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:44' prior: 50344154!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStack methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:10:15' prior: 50344166 overrides: 16920235!
initialize
	^Base new.
	
! !
!OOStack class methodsFor: 'error descriptions' stamp: 'NR 9/14/2023 08:12:21' prior: 50344170!
stackEmptyErrorDescription
	
	^ 'stack is empty!!!!!!'! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:02:43' prior: 50344175!
getNext
	^next! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 18:06:27' prior: 50344179!
isEmpty
	^next isEmpty! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:06:11' prior: 50344183!
pop
	^next pop! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:18:22' prior: 50344187!
popeate
	^OOStack error: OOStack stackEmptyErrorDescription ! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 16:22:21' prior: 50344192!
push: anElement
	next push: anElement! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:03:57' prior: 50344196!
setNext: anElement
	next := anElement 
! !
!Base methodsFor: 'operaciones' stamp: 'zm 9/17/2023 19:26:32' prior: 50344200!
top
	^next top! !
!Base methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:45:31' prior: 50344204 overrides: 50345105!
initialize
	next := Tope with: self.! !
!Base class methodsFor: 'as yet unclassified' stamp: 'zm 9/17/2023 18:48:16' prior: 50344209!
with: anElement
	^Base new initializeWith: anElement! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:52:11' prior: 50344215 overrides: 50345105!
initialize! !
!Elemento methodsFor: 'initialization' stamp: 'zm 9/17/2023 19:00:54' prior: 50344219!
with: anElement despuesDe: prevElement

	prev := prevElement .
	info := anElement. 
	next := prevElement getNext! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:56' prior: 50344226!
getInfo
	^info! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:01:19' prior: 50344229!
getNext
	^next! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:05:17' prior: 50344232!
isEmpty
	^false
		

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:14:28' prior: 50344236!
pop
	^next pop
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:25:30' prior: 50344240!
popeate
	prev setNext: next.
	next setUltimo: prev.
	^ info
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:00:34' prior: 50344245!
push: anElement
	next push: anElement .
	

! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 18:57:23' prior: 50344249!
setNext: anElement
	next := anElement 
! !
!Elemento methodsFor: 'utils' stamp: 'zm 9/17/2023 19:26:49' prior: 50344253!
top
	^next top
! !
!Elemento class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:51:03' prior: 50344257!
with: anElement despuesDe: prevElement

	^Elemento new with: anElement despuesDe: prevElement
! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:06:51' prior: 50344263!
isEmpty
	^true! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:18:48' prior: 50344266!
pop
	^ultimo popeate! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 18:56:08' prior: 50344270!
push: anElement
	|newElement|
	newElement := Elemento with: anElement despuesDe: ultimo.
	ultimo setNext: newElement.
	ultimo := newElement.


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:22:11' prior: 50344277!
setUltimo: nuevoUltimo
	ultimo := nuevoUltimo 


	! !
!Tope methodsFor: 'utils' stamp: 'zm 9/17/2023 19:27:42' prior: 50344281!
top
	^ultimo getInfo! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 16:45:54' prior: 50344285 overrides: 50345105!
initialize


	! !
!Tope methodsFor: 'initialization' stamp: 'zm 9/17/2023 18:36:41' prior: 50344289!
initializeWithUltimo: aPrev
	ultimo := aPrev


	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:40:29' prior: 50344294!
initializeWithUltimo: aPrev
	! !
!Tope class methodsFor: 'instance creation' stamp: 'zm 9/17/2023 18:49:49' prior: 50344298!
with: ultimo
	^Tope new initializeWithUltimo: ultimo

	
	! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:07' prior: 50344878!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:11' prior: 50344883!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:46' prior: 50344888!
toMyLeft
	^North new.! !
!East methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:34' prior: 50344892!
toMyRight
	^South new.! !
!East methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:17' prior: 50344897 overrides: 16920235!
initialize
	value := #East.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:44:29' prior: 50344901!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:42:36' prior: 50344906!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:39' prior: 50344911!
toMyLeft
	^West new.! !
!North methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:43' prior: 50344915!
toMyRight
	^East new.! !
!North methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:06:07' prior: 50344920 overrides: 16920235!
initialize
	value := #North.! !
!South methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:28' prior: 50344925 overrides: 16920235!
initialize
	value := #South.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:47:44' prior: 50344929!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:43:03' prior: 50344934!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:12:29' prior: 50344939!
toMyLeft
	^East new.! !
!South methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:17:53' prior: 50344943!
toMyRight
	^West new.! !
!West methodsFor: 'initialization' stamp: 'Joaco 10/7/2023 16:10:38' prior: 50344948 overrides: 16920235!
initialize
	value := #West.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:45:30' prior: 50344952!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:41:52' prior: 50344957!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:09:50' prior: 50344962!
toMyLeft
	^South new.! !
!West methodsFor: 'accessing' stamp: 'Joaco 10/7/2023 16:18:12' prior: 50344966!
toMyRight
	^North new.! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 16:04:47' prior: 50344970!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].! !
!MarsRover methodsFor: 'comparing' stamp: 'Joaco 10/7/2023 17:06:23' prior: 50344977!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14' prior: 50344985!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28' prior: 50344992!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'zm 10/9/2023 14:31:09' prior: 50345356!
withPosition: aPosition andDirection: aDirection 
	^self new initializeWithPosition: aPosition andDirection: aDirection ! !
!MarsRover methodsFor: 'initialization' stamp: 'zm 10/9/2023 14:31:29' prior: 50345349!
initializeWithPosition: aPosition andDirection: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 14:32:15' prior: 50344438!
process: aComand 
	! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:29' prior: 50344442!
position
	^position! !
!MarsRover methodsFor: 'information' stamp: 'zm 10/9/2023 14:35:54' prior: 50344446!
direction
	^direction! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:16' prior: 50344461!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 14:39:39' prior: 50345389!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (North)).

	! !

!methodRemoval: South #nextPositionBackwardsFromPostion: stamp: 'zm 10/9/2023 17:03:06'!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (0@1).!

!methodRemoval: South #nextPositionFowardFromPosition: stamp: 'zm 10/9/2023 17:03:07'!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (0@1)
	!

!methodRemoval: South #toMyLeft stamp: 'zm 10/9/2023 17:03:08'!
toMyLeft
	^East new.!

!methodRemoval: South #toMyRight stamp: 'zm 10/9/2023 17:03:11'!
toMyRight
	^West new.!

Object subclass: #Compass
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: 'MarsRover' stamp: 'zm 10/9/2023 17:03:56'!
Object subclass: #Compass
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!methodRemoval: East #nextPositionBackwardsFromPostion: stamp: 'zm 10/9/2023 17:04:03'!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (1@0).!

!methodRemoval: East #nextPositionFowardFromPosition: stamp: 'zm 10/9/2023 17:04:04'!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (1@0).!

!methodRemoval: East #toMyLeft stamp: 'zm 10/9/2023 17:04:05'!
toMyLeft
	^North new.!

!methodRemoval: East #toMyRight stamp: 'zm 10/9/2023 17:04:06'!
toMyRight
	^South new.!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:04:26'!
FAILURE!

!methodRemoval: MarsRover #isInPosition:pointingTo: stamp: 'zm 10/9/2023 17:05:14'!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction value = aDirection ].!

!methodRemoval: MarsRover #isInvalidRoverCommand: stamp: 'zm 10/9/2023 17:05:14'!
isInvalidRoverCommand: aCommand

	^ ((aCommand = $f) not and: [(aCommand = $b) not and: [(aCommand = $l) not and: [ (aCommand = $r) not]]]).!

!classRemoval: #Holliday stamp: 'zm 10/9/2023 17:05:46'!
AnualCalendar subclass: #Holliday
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #Day stamp: 'zm 10/9/2023 17:05:46'!
AnualCalendar subclass: #Day
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #AnualCalendar stamp: 'zm 10/9/2023 17:05:46'!
Object subclass: #AnualCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #AnualCalendarTests stamp: 'zm 10/9/2023 17:05:46'!
TestCase subclass: #AnualCalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendar'!

!classRemoval: #SentenceFinderByPrefix stamp: 'zm 10/9/2023 17:05:50'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Tope stamp: 'zm 10/9/2023 17:05:50'!
OOStack subclass: #Tope
	instanceVariableNames: 'ultimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Elemento stamp: 'zm 10/9/2023 17:05:51'!
OOStack subclass: #Elemento
	instanceVariableNames: 'info next prev'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Base stamp: 'zm 10/9/2023 17:05:51'!
OOStack subclass: #Base
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'zm 10/9/2023 17:05:51'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'zm 10/9/2023 17:05:51'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'zm 10/9/2023 17:05:51'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 17:06:25' prior: 50345377!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft ].
		aCommand = $r ifTrue: [ direction := direction goRight ].
		].! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:06:30'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:06:30'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:06:36'!
ERROR!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:06:36'!
ERROR!
!East methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:07:16' prior: 50345261 overrides: 16920235!
initialize
	value := #East! !

!methodRemoval: North #nextPositionBackwardsFromPostion: stamp: 'zm 10/9/2023 17:07:32'!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition - (0@1).!

!methodRemoval: North #nextPositionFowardFromPosition: stamp: 'zm 10/9/2023 17:07:32'!
nextPositionFowardFromPosition: aPosition 
	^aPosition + (0@1)!

!methodRemoval: North #toMyLeft stamp: 'zm 10/9/2023 17:07:32'!
toMyLeft
	^West new.!

!methodRemoval: North #toMyRight stamp: 'zm 10/9/2023 17:07:32'!
toMyRight
	^East new.!

!methodRemoval: West #nextPositionBackwardsFromPostion: stamp: 'zm 10/9/2023 17:07:41'!
nextPositionBackwardsFromPostion: aPosition 
	^aPosition + (1@0).!

!methodRemoval: West #nextPositionFowardFromPosition: stamp: 'zm 10/9/2023 17:07:41'!
nextPositionFowardFromPosition: aPosition 
	^aPosition - (1@0).!

!methodRemoval: West #toMyLeft stamp: 'zm 10/9/2023 17:07:41'!
toMyLeft
	^South new.!

!methodRemoval: West #toMyRight stamp: 'zm 10/9/2023 17:07:41'!
toMyRight
	^North new.!
!West methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:07:48' prior: 50345312 overrides: 16920235!
initialize
	value := #West! !
!South methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:07:53' prior: 50345289 overrides: 16920235!
initialize
	value := #South! !
!North methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:07:59' prior: 50345284 overrides: 16920235!
initialize
	value := #North! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:08:26'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:08:26'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:08:30'!
ERROR!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:08:30'!
ERROR!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:08:46'!
ERROR!

----STARTUP---- (9 October 2023 17:09:00) as /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/CuisUniversity-5981.image!


----End fileIn of /home/winnaz/Workspace/CDLC/IngeI/SmallTalkCuis/MarsRover.st----!
!East methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:36' prior: 50345952 overrides: 16920235!
initialize
	value := #East! !
!East methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:37' prior: 50346166 overrides: 16920235!
initialize
	value := #East.! !
!North methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:41' prior: 50345999 overrides: 16920235!
initialize
	value := #North! !
!North methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:42' prior: 50346176 overrides: 16920235!
initialize
	value := #North.! !
!South methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:46' prior: 50346030 overrides: 16920235!
initialize
	value := #South! !
!South methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:47' prior: 50346186 overrides: 16920235!
initialize
	value := #South.! !
!West methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:51' prior: 50346061 overrides: 16920235!
initialize
	value := #West! !
!West methodsFor: 'initialization' stamp: 'zm 10/9/2023 17:09:54' prior: 50346196 overrides: 16920235!
initialize
	value := #West.! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 17:12:02' prior: 50346135!
process: aCommandList
    | commandMap |
    commandMap := Dictionary new.
    commandMap at: $f put: [ :aposition | direction goUp: position ].
    commandMap at: $b put: [ :aposition | direction goDown: position ].
    commandMap at: $l put: [ :aposition | direction goLeft ].
    commandMap at: $r put: [ :aposition | direction goRight ].

    aCommandList do: [ :aCommand |
        (commandMap at: aCommand ifAbsent: []) value: position.
    ].! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:12:04'!
ERROR!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:12:04'!
FAILURE!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:12:04'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 17:13:11' prior: 50346205!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isInvalidRoverCommand: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft ].
		aCommand = $r ifTrue: [ direction := direction goRight ].
		].
! !
!MarsRover methodsFor: 'processing' stamp: 'zm 10/9/2023 17:13:25' prior: 50346314!
process: aCommandList
	
	aCommandList do: [ :aCommand |  
		(self isCommandValid: aCommand) ifTrue: [^self].
		aCommand = $f ifTrue: [	 position := direction goUp:  position ].
		aCommand = $b ifTrue: [ position := direction goDown: position ].	
		aCommand = $l ifTrue: [ direction :=  direction goLeft ].
		aCommand = $r ifTrue: [ direction := direction goRight ].
		].
! !

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:13:33'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:13:33'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:13:33'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:13:46'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:13:50'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:13:50'!
FAILURE!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:13:50'!
PASSED!

myRover position!

myRover direction value!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:14:21' prior: 50345879!
test21ProccessMultipleCommandsMovesTheRoverCorrectly
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffrlbrlnnr'.
		
	self assert: (myRover position = (-1@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:14:26'!
FAILURE!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:14:26'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:14:26'!
FAILURE!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:14:33'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:14:53' prior: 50345649!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:14:55'!
FAILURE!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:15:06' prior: 50346653!
test01InitializingRoverAndItStaysInThatSpot
	|myRover |
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: ''.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#North)).

	! !

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:15:07'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:15:07'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:15:21'!
test24ProccessMultipleInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'x'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test24ProccessMultipleInvalidComand stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:15:23'!
PASSED!

!testRun: #MarsRoverTests #test24ProccessMultipleInvalidComand stamp: 'zm 10/9/2023 17:15:23'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:15:29' prior: 50346773!
test24ProccessMultipleInvalidComand
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'xkaaje'.
		
	self assert: (myRover position = (0@0)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test24ProccessMultipleInvalidComand stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:15:30'!
PASSED!

!testRun: #MarsRoverTests #test24ProccessMultipleInvalidComand stamp: 'zm 10/9/2023 17:15:30'!
PASSED!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:15:51'!
test24ProccessValidAndInvalidComands
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: West new.
	myRover process: 'ffxff'.
		
	self assert: (myRover position = (0@4)).
	self assert: (myRover direction value = (#West)).
	! !

!testRun: #MarsRoverTests #test24ProccessValidAndInvalidComands stamp: 'zm 10/9/2023 17:15:52'!
FAILURE!

myRover position!
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:16:21' prior: 50346990!
test24ProccessValidAndInvalidComands
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ffxff'.
		
	self assert: (myRover position = (0@4)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test24ProccessValidAndInvalidComands stamp: 'zm 10/9/2023 17:16:22'!
FAILURE!

myRover position !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:16:41' prior: 50347005!
test24ProccessValidAndInvalidComands
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ffxff'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !
!MarsRoverTests methodsFor: 'testing' stamp: 'zm 10/9/2023 17:16:47' prior: 50347020!
test24ProccessValidAndInvalidComands
	|myRover|
	
	myRover := MarsRover withPosition: (0@0) andDirection: North new.
	myRover process: 'ffx'.
		
	self assert: (myRover position = (0@2)).
	self assert: (myRover direction value = (#North)).
	! !

!testRun: #MarsRoverTests #test24ProccessValidAndInvalidComands stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test01InitializingRoverAndItStaysInThatSpot stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardEast stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test02ProccessMovesTheRoverToTheCorrectPositionForwardWest stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test04ProccessMovesTheRoverToTheCorrectPositionForwardSouth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test05ProccessMovesTheRoverToTheCorrectPositionForwardNorth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test06ProccessMovesTheRoverToTheCorrectPositionBackNorth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test07ProccessMovesTheRoverToTheCorrectPositionBackSouth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test08ProccessMovesTheRoverToTheCorrectPositionBackEast stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test09ProccessMovesTheRoverToTheCorrectPositionBackWest stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test10ProccessLeftMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test11ProccessLeftMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test12ProccessLeftMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test13ProccessLeftMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test14ProccessRightMovesThePositionCorrectlySouth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test15ProccessRightMovesThePositionCorrectlyNorth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test16ProccessRightMovesThePositionCorrectlyEast stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test17ProccessRightMovesThePositionCorrectlyWest stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test18ProccessMultipleCommandsMovesThePositionCorrectlyForwardNorth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyBackSouth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test19ProccessMultipleCommandsMovesThePositionCorrectlyLeftNorth stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test20ProccessMultipleCommandsMovesThePositionCorrectlyRightWest stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test21ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test22ProccessMultipleCommandsMovesTheRoverCorrectly stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test23ProccessInvalidComand stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test24ProccessMultipleInvalidComand stamp: 'zm 10/9/2023 17:16:47'!
PASSED!

!testRun: #MarsRoverTests #test24ProccessValidAndInvalidComands stamp: 'zm 10/9/2023 17:16:47'!
PASSED!